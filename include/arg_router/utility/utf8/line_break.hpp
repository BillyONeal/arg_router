/* Copyright (C) 2022 by Camden Mannett.  All rights reserved. */

#pragma once

#include "arg_router/utility/utf8/code_point.hpp"

#include <array>

namespace arg_router::utility::utf8
{
/** Line break classes, and their values in the encoded code points in line_break_table.
 *
 * Do not change the order or value as they need to match scripts/unicode_table_generators.py.
 */
enum class line_break_class : std::uint8_t {
    any,
    AL,
    BA,
    BB,
    B2,
    BK,
    CB,
    CL,
    CM,
    CP,
    CR,
    EB,
    EM,
    EX,
    GL,
    H2,
    H3,
    HY,
    ID,
    HL,
    IN_,  // Trailing underscore due to Windows having defined IN...
    IS,
    JL,
    JT,
    JV,
    LF,
    NL,
    NS,
    NU,
    OP,
    PO,
    PR,
    QU,
    RI,
    SP,
    SY,
    WJ,
    ZW,
    ZWJ,
};

namespace no_break_rules
{
/** Rule LB6, do not break before hard line breaks.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB6(
    [[maybe_unused]] const std::array<line_break_class, N>& trailing_window,
    line_break_class next_class) noexcept
{
    return (next_class == line_break_class::BK) ||  //
           (next_class == line_break_class::CR) ||  //
           (next_class == line_break_class::LF) ||  //
           (next_class == line_break_class::NL);
}

/** Rule LB7, do not break before spaces or zero width space.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB7(
    [[maybe_unused]] const std::array<line_break_class, N>& trailing_window,
    line_break_class next_class) noexcept
{
    return (next_class == line_break_class::SP) ||  //
           (next_class == line_break_class::ZW);
}

/** Rule LB8a and LB9, do not break after a combining character sequence or zero width joiner.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB8a_9(const std::array<line_break_class, N>& trailing_window,
                                    [[maybe_unused]] line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return (trailing_window[0] == line_break_class::CM) ||
           (trailing_window[0] == line_break_class::ZWJ);
}

/** Rule LB11, do not break before or after Word joiner and related characters.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB11(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return (trailing_window[0] == line_break_class::WJ) ||  //
           (next_class == line_break_class::WJ);
}

/** Rule LB12, do not break after NBSP and related characters.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB12(const std::array<line_break_class, N>& trailing_window,
                                  [[maybe_unused]] line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return trailing_window[0] == line_break_class::GL;
}

/** Rule LB12a, do not break before NBSP and related characters, except after spaces and hyphens.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB12a(const std::array<line_break_class, N>& trailing_window,
                                   line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return ((trailing_window[0] != line_break_class::SP) &&
            (trailing_window[0] != line_break_class::BA) &&
            (trailing_window[0] != line_break_class::HY)) &&
           (next_class == line_break_class::GL);
}

/** Rule LB13, do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB13(
    [[maybe_unused]] const std::array<line_break_class, N>& trailing_window,
    line_break_class next_class) noexcept
{
    return (next_class == line_break_class::CL) ||  //
           (next_class == line_break_class::CP) ||  //
           (next_class == line_break_class::EX) ||  //
           (next_class == line_break_class::IS) ||  //
           (next_class == line_break_class::SY);
}

/** Rule LB14, do not break after ‘[’, even after spaces.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB14(const std::array<line_break_class, N>& trailing_window,
                                  [[maybe_unused]] line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");

    auto it = trailing_window.begin();
    for (; it != trailing_window.end(); ++it) {
        if (*it == line_break_class::SP) {
            continue;
        }

        return *it == line_break_class::OP;
    }

    return false;
}

/** Rule LB15, do not break within ‘”[’, even with intervening spaces.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB15(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");

    auto it = trailing_window.begin();
    for (; it != trailing_window.end(); ++it) {
        if (*it == line_break_class::SP) {
            continue;
        }

        return (*it == line_break_class::QU) &&  //
               (next_class == line_break_class::OP);
    }

    return false;
}

/** Rule LB16, do not break between closing punctuation and a nonstarter (<TT>NS</TT>), even with
 * intervening spaces.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB16(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");

    auto it = trailing_window.begin();
    for (; it != trailing_window.end(); ++it) {
        if (*it == line_break_class::SP) {
            continue;
        }

        return ((*it == line_break_class::CL) || (*it == line_break_class::CP)) &&
               (next_class == line_break_class::NS);
    }

    return false;
}

/** Rule LB17, do not break within ‘——’, even with intervening spaces.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB17(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");

    auto it = trailing_window.begin();
    for (; it != trailing_window.end(); ++it) {
        if (*it == line_break_class::SP) {
            continue;
        }

        return (*it == line_break_class::B2) &&  //
               (next_class == line_break_class::B2);
    }

    return false;
}

/** Rule LB19, do not break before or after quotation marks, such as ‘”’.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB19(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return (next_class == line_break_class::QU) ||  //
           (trailing_window[0] == line_break_class::QU);
}

/** Rule LB21, do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and
 * other non-starters, or after acute accents.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB21(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return (next_class == line_break_class::BA) ||  //
           (next_class == line_break_class::HY) ||  //
           (next_class == line_break_class::NS) ||  //
           (trailing_window[0] == line_break_class::BB);
}

/** Rule LB21a, do not break after Hebrew + Hyphen.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB21a(const std::array<line_break_class, N>& trailing_window,
                                   [[maybe_unused]] line_break_class next_class) noexcept
{
    static_assert(N > 1, "Trailing window must be at least 2 elements");
    return (trailing_window[1] == line_break_class::HL) &&
           ((trailing_window[0] == line_break_class::HY) ||
            (trailing_window[0] == line_break_class::BA));
}

/** Rule LB21b, do not break between Solidus and Hebrew letters.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB21b(const std::array<line_break_class, N>& trailing_window,
                                   line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return (trailing_window[0] == line_break_class::SY) &&  //
           (next_class == line_break_class::HL);
}

/** Rule LB22, do not break before ellipses.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB22(
    [[maybe_unused]] const std::array<line_break_class, N>& trailing_window,
    line_break_class next_class) noexcept
{
    return next_class == line_break_class::IN_;
}

/** Rule LB23, do not break between digits and letters.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB23(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return (((trailing_window[0] == line_break_class::AL) ||
             (trailing_window[0] == line_break_class::HL)) &&
            (next_class == line_break_class::NU)) ||
           ((trailing_window[0] == line_break_class::NU) &&
            ((next_class == line_break_class::AL) ||  //
             (next_class == line_break_class::HL)));
}

/** Rule LB23a, do not break between numeric prefixes and ideographs, or between ideographs and
 * numeric postfixes.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB23a(const std::array<line_break_class, N>& trailing_window,
                                   line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return ((trailing_window[0] == line_break_class::PR) &&
            ((next_class == line_break_class::ID) ||          //
             (next_class == line_break_class::EB) ||          //
             (next_class == line_break_class::EM))) ||        //
           (((trailing_window[0] == line_break_class::ID) ||  //
             (trailing_window[0] == line_break_class::EB) ||  //
             (trailing_window[0] == line_break_class::EM)) &&
            (next_class == line_break_class::PO));
}

/** Rule LB24, do not break between numeric prefixes and ideographs, or between ideographs and
 * numeric postfixes.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB24(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return (((trailing_window[0] == line_break_class::PR) ||
             (trailing_window[0] == line_break_class::PO)) &&
            ((next_class == line_break_class::AL) ||  //
             (next_class == line_break_class::HL))) ||
           (((trailing_window[0] == line_break_class::AL) ||
             (trailing_window[0] == line_break_class::HL)) &&
            ((next_class == line_break_class::PR) ||  //
             (next_class == line_break_class::PO)));
}

/** Rule LB25, do not break between these pairs of classes relevant to numbers.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB25(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");

    constexpr auto pairs = std::array{
        std::array{line_break_class::CL, line_break_class::PO},
        std::array{line_break_class::CP, line_break_class::PO},
        std::array{line_break_class::CL, line_break_class::PR},
        std::array{line_break_class::CP, line_break_class::PR},
        std::array{line_break_class::NU, line_break_class::PO},
        std::array{line_break_class::NU, line_break_class::PR},
        std::array{line_break_class::PO, line_break_class::OP},
        std::array{line_break_class::PO, line_break_class::NU},
        std::array{line_break_class::PR, line_break_class::OP},
        std::array{line_break_class::PR, line_break_class::NU},
        std::array{line_break_class::HY, line_break_class::NU},
        std::array{line_break_class::IS, line_break_class::NU},
        std::array{line_break_class::NU, line_break_class::NU},
        std::array{line_break_class::SY, line_break_class::NU},
    };

    for (const auto pr : pairs) {
        if ((trailing_window[0] == pr[0]) && (next_class == pr[1])) {
            return true;
        }
    }

    return false;
}

/** Rule LB26, do not break a Korean syllable.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB26(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return ((trailing_window[0] == line_break_class::JL) &&  //
            ((next_class == line_break_class::JL) ||         //
             (next_class == line_break_class::JV) ||         //
             (next_class == line_break_class::H2) ||         //
             (next_class == line_break_class::H3))) ||
           (((trailing_window[0] == line_break_class::JV) ||  //
             (trailing_window[0] == line_break_class::H2)) &&
            ((next_class == line_break_class::JV) ||  //
             (next_class == line_break_class::JT))) ||
           (((trailing_window[0] == line_break_class::JT) ||   //
             (trailing_window[0] == line_break_class::H3)) &&  //
            (next_class == line_break_class::JT));
}

/** Rule LB27, treat a Korean Syllable Block the same as ID.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB27(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return (((trailing_window[0] == line_break_class::JL) ||  //
             (trailing_window[0] == line_break_class::JV) ||  //
             (trailing_window[0] == line_break_class::JT) ||  //
             (trailing_window[0] == line_break_class::H2) ||  //
             (trailing_window[0] == line_break_class::H3)) &&
            (next_class == line_break_class::PO)) ||
           ((trailing_window[0] == line_break_class::PR) &&  //
            ((next_class == line_break_class::JL) ||         //
             (next_class == line_break_class::JV) ||         //
             (next_class == line_break_class::JT) ||         //
             (next_class == line_break_class::H2) ||         //
             (next_class == line_break_class::H3)));
}

/** Rule LB28, do not break between alphabetics (“at”).
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB28(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return ((trailing_window[0] == line_break_class::AL) ||  //
            (trailing_window[0] == line_break_class::HL)) &&
           ((next_class == line_break_class::AL) ||  //
            (next_class == line_break_class::HL));
}

/** Rule LB29, do not break between numeric punctuation and alphabetics (“e.g.”).
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB29(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return (trailing_window[0] == line_break_class::IS) &&
           ((next_class == line_break_class::AL) ||  //
            (next_class == line_break_class::HL));
}

/** Rule LB30, do not break between letters, numbers, or ordinary symbols and opening or closing
 * parentheses.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 *
 * @note This is not a true LB30 because it doesn't take into account far east asian parentheses
 * styles, so it can cause a break between a latin alphanumeric character and a far east asian
 * open parentheses for example
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB30(const std::array<line_break_class, N>& trailing_window,
                                  line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return (((trailing_window[0] == line_break_class::AL) ||  //
             (trailing_window[0] == line_break_class::HL) ||  //
             (trailing_window[0] == line_break_class::NU)) &&
            (next_class == line_break_class::OP)) ||         //
           ((trailing_window[0] == line_break_class::CP) &&  //
            ((next_class == line_break_class::AL) ||         //
             (next_class == line_break_class::HL) ||         //
             (next_class == line_break_class::NU)));
}

/** Rule LB30a, break between two regional indicator symbols if and only if there are an even number
 * of regional indicators preceding the position of the break.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB30a(const std::array<line_break_class, N>& trailing_window,
                                   line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");

    // Count the preceding RIs, if there's an odd number - do not break
    auto i = 0u;
    for (; i < trailing_window.size(); ++i) {
        if (trailing_window[i] != line_break_class::RI) {
            break;
        }
    }

    return ((i % 2) != 0) && (next_class == line_break_class::RI);
}

/** Rule LB30b, do not break between an emoji base (or potential emoji) and an emoji modifier.
 *
 * From https://www.unicode.org/reports/tr14/#Algorithm.
 *
 * @note This is not a true LB30b as it doesn't take into account extended pictographic
 * @tparam N Size of trailing window
 * @param trailing_window Trailing window of properties, the zeroth index is the 'current' class
 * begin iterated over
 * @param next_class The class after the current one
 * @return True if you should not break between these break classes
 */
template <std::size_t N>
[[nodiscard]] constexpr bool LB30b(const std::array<line_break_class, N>& trailing_window,
                                   line_break_class next_class) noexcept
{
    static_assert(N > 0, "Trailing window must be at least 1 element");
    return (trailing_window[0] == line_break_class::EB) &&  //
           (next_class == line_break_class::EM);
}

/** Array of rule function pointers, just to ease iteration.
 *
 * @tparam N Size of trailing window
 */
template <std::size_t N>
constexpr auto line_break = std::array{
    &LB6<N>,  &LB7<N>,  &LB8a_9<N>, &LB11<N>, &LB12<N>,  &LB12a<N>, &LB13<N>, &LB14<N>,  &LB15<N>,
    &LB16<N>, &LB17<N>, &LB19<N>,   &LB21<N>, &LB21a<N>, &LB21b<N>, &LB22<N>, &LB23<N>,  &LB23a<N>,
    &LB24<N>, &LB25<N>, &LB26<N>,   &LB27<N>, &LB28<N>,  &LB29<N>,  &LB30<N>, &LB30a<N>, &LB30b<N>,
};
}  // namespace no_break_rules

/** Line break class mask for values in line_break_table. */
constexpr auto line_break_class_mask = code_point::type{0x7E00000};

/** Line break class table.
 *
 * Each entry is an inclusive range of code points, with each code point in the range being encoded
 * with their break class value.  The first 21 bits is the code point value (as normal), whilst the
 * following 6 bits carries the class.
 *
 * This table is generated using scripts/unicode_table_generators.py from
 * https://www.unicode.org/Public/UCD/latest/ucd/LineBreak.txt v14.0.0
 *
 * @note The values are sorted as if the class bits are not present, this allows for binary
 * searching using a code point - as long as your binary search algorithm only compares the code
 * point bits of the ranges
 */
constexpr auto line_break_table = std::array<code_point::range, 3500>{{
    {0x1000000, 0x1000008}, {0x400009, 0x400009},   {0x320000A, 0x320000A}, {0xA0000B, 0xA0000C},
    {0x140000D, 0x140000D}, {0x100000E, 0x100001F}, {0x4400020, 0x4400020}, {0x1A00021, 0x1A00021},
    {0x4000022, 0x4000022}, {0x200023, 0x200023},   {0x3E00024, 0x3E00024}, {0x3C00025, 0x3C00025},
    {0x200026, 0x200026},   {0x4000027, 0x4000027}, {0x3A00028, 0x3A00028}, {0x1200029, 0x1200029},
    {0x20002A, 0x20002A},   {0x3E0002B, 0x3E0002B}, {0x2A0002C, 0x2A0002C}, {0x220002D, 0x220002D},
    {0x2A0002E, 0x2A0002E}, {0x460002F, 0x460002F}, {0x3800030, 0x3800039}, {0x2A0003A, 0x2A0003B},
    {0x20003C, 0x20003E},   {0x1A0003F, 0x1A0003F}, {0x200040, 0x200040},   {0x200041, 0x20005A},
    {0x3A0005B, 0x3A0005B}, {0x3E0005C, 0x3E0005C}, {0x120005D, 0x120005D}, {0x20005E, 0x20005E},
    {0x20005F, 0x20005F},   {0x200060, 0x200060},   {0x200061, 0x20007A},   {0x3A0007B, 0x3A0007B},
    {0x40007C, 0x40007C},   {0xE0007D, 0xE0007D},   {0x20007E, 0x20007E},   {0x100007F, 0x100007F},
    {0x1000080, 0x1000084}, {0x3400085, 0x3400085}, {0x1000086, 0x100009F}, {0x1C000A0, 0x1C000A0},
    {0x3A000A1, 0x3A000A1}, {0x3C000A2, 0x3C000A2}, {0x3E000A3, 0x3E000A5}, {0x2000A6, 0x2000A6},
    {0x2000A7, 0x2000A7},   {0x2000A8, 0x2000A8},   {0x2000A9, 0x2000A9},   {0x2000AA, 0x2000AA},
    {0x40000AB, 0x40000AB}, {0x2000AC, 0x2000AC},   {0x4000AD, 0x4000AD},   {0x2000AE, 0x2000AE},
    {0x2000AF, 0x2000AF},   {0x3C000B0, 0x3C000B0}, {0x3E000B1, 0x3E000B1}, {0x2000B2, 0x2000B3},
    {0x6000B4, 0x6000B4},   {0x2000B5, 0x2000B5},   {0x2000B6, 0x2000B7},   {0x2000B8, 0x2000B8},
    {0x2000B9, 0x2000B9},   {0x2000BA, 0x2000BA},   {0x40000BB, 0x40000BB}, {0x2000BC, 0x2000BE},
    {0x3A000BF, 0x3A000BF}, {0x2000C0, 0x2000D6},   {0x2000D7, 0x2000D7},   {0x2000D8, 0x2000F6},
    {0x2000F7, 0x2000F7},   {0x2000F8, 0x2000FF},   {0x200100, 0x20017F},   {0x200180, 0x2001BA},
    {0x2001BB, 0x2001BB},   {0x2001BC, 0x2001BF},   {0x2001C0, 0x2001C3},   {0x2001C4, 0x20024F},
    {0x200250, 0x200293},   {0x200294, 0x200294},   {0x200295, 0x2002AF},   {0x2002B0, 0x2002C1},
    {0x2002C2, 0x2002C5},   {0x2002C6, 0x2002C6},   {0x2002C7, 0x2002C7},   {0x6002C8, 0x6002C8},
    {0x2002C9, 0x2002CB},   {0x6002CC, 0x6002CC},   {0x2002CD, 0x2002CD},   {0x2002CE, 0x2002CF},
    {0x2002D0, 0x2002D0},   {0x2002D1, 0x2002D1},   {0x2002D2, 0x2002D7},   {0x2002D8, 0x2002DB},
    {0x2002DC, 0x2002DC},   {0x2002DD, 0x2002DD},   {0x2002DE, 0x2002DE},   {0x6002DF, 0x6002DF},
    {0x2002E0, 0x2002E4},   {0x2002E5, 0x2002EB},   {0x2002EC, 0x2002EC},   {0x2002ED, 0x2002ED},
    {0x2002EE, 0x2002EE},   {0x2002EF, 0x2002FF},   {0x1000300, 0x100034E}, {0x1C0034F, 0x1C0034F},
    {0x1000350, 0x100035B}, {0x1C0035C, 0x1C00362}, {0x1000363, 0x100036F}, {0x200370, 0x200373},
    {0x200374, 0x200374},   {0x200375, 0x200375},   {0x200376, 0x200377},   {0x20037A, 0x20037A},
    {0x20037B, 0x20037D},   {0x2A0037E, 0x2A0037E}, {0x20037F, 0x20037F},   {0x200384, 0x200385},
    {0x200386, 0x200386},   {0x200387, 0x200387},   {0x200388, 0x20038A},   {0x20038C, 0x20038C},
    {0x20038E, 0x2003A1},   {0x2003A3, 0x2003F5},   {0x2003F6, 0x2003F6},   {0x2003F7, 0x2003FF},
    {0x200400, 0x200481},   {0x200482, 0x200482},   {0x1000483, 0x1000487}, {0x1000488, 0x1000489},
    {0x20048A, 0x2004FF},   {0x200500, 0x20052F},   {0x200531, 0x200556},   {0x200559, 0x200559},
    {0x20055A, 0x20055F},   {0x200560, 0x200588},   {0x2A00589, 0x2A00589}, {0x40058A, 0x40058A},
    {0x20058D, 0x20058E},   {0x3E0058F, 0x3E0058F}, {0x1000591, 0x10005BD}, {0x4005BE, 0x4005BE},
    {0x10005BF, 0x10005BF}, {0x2005C0, 0x2005C0},   {0x10005C1, 0x10005C2}, {0x2005C3, 0x2005C3},
    {0x10005C4, 0x10005C5}, {0x1A005C6, 0x1A005C6}, {0x10005C7, 0x10005C7}, {0x26005D0, 0x26005EA},
    {0x26005EF, 0x26005F2}, {0x2005F3, 0x2005F4},   {0x200600, 0x200605},   {0x200606, 0x200608},
    {0x3C00609, 0x3C0060A}, {0x3C0060B, 0x3C0060B}, {0x2A0060C, 0x2A0060D}, {0x20060E, 0x20060F},
    {0x1000610, 0x100061A}, {0x1A0061B, 0x1A0061B}, {0x100061C, 0x100061C}, {0x1A0061D, 0x1A0061F},
    {0x200620, 0x20063F},   {0x200640, 0x200640},   {0x200641, 0x20064A},   {0x100064B, 0x100065F},
    {0x3800660, 0x3800669}, {0x3C0066A, 0x3C0066A}, {0x380066B, 0x380066C}, {0x20066D, 0x20066D},
    {0x20066E, 0x20066F},   {0x1000670, 0x1000670}, {0x200671, 0x2006D3},   {0x1A006D4, 0x1A006D4},
    {0x2006D5, 0x2006D5},   {0x10006D6, 0x10006DC}, {0x2006DD, 0x2006DD},   {0x2006DE, 0x2006DE},
    {0x10006DF, 0x10006E4}, {0x2006E5, 0x2006E6},   {0x10006E7, 0x10006E8}, {0x2006E9, 0x2006E9},
    {0x10006EA, 0x10006ED}, {0x2006EE, 0x2006EF},   {0x38006F0, 0x38006F9}, {0x2006FA, 0x2006FC},
    {0x2006FD, 0x2006FE},   {0x2006FF, 0x2006FF},   {0x200700, 0x20070D},   {0x20070F, 0x20070F},
    {0x200710, 0x200710},   {0x1000711, 0x1000711}, {0x200712, 0x20072F},   {0x1000730, 0x100074A},
    {0x20074D, 0x20074F},   {0x200750, 0x20077F},   {0x200780, 0x2007A5},   {0x10007A6, 0x10007B0},
    {0x2007B1, 0x2007B1},   {0x38007C0, 0x38007C9}, {0x2007CA, 0x2007EA},   {0x10007EB, 0x10007F3},
    {0x2007F4, 0x2007F5},   {0x2007F6, 0x2007F6},   {0x2007F7, 0x2007F7},   {0x2A007F8, 0x2A007F8},
    {0x1A007F9, 0x1A007F9}, {0x2007FA, 0x2007FA},   {0x10007FD, 0x10007FD}, {0x3E007FE, 0x3E007FF},
    {0x200800, 0x200815},   {0x1000816, 0x1000819}, {0x20081A, 0x20081A},   {0x100081B, 0x1000823},
    {0x200824, 0x200824},   {0x1000825, 0x1000827}, {0x200828, 0x200828},   {0x1000829, 0x100082D},
    {0x200830, 0x20083E},   {0x200840, 0x200858},   {0x1000859, 0x100085B}, {0x20085E, 0x20085E},
    {0x200860, 0x20086A},   {0x200870, 0x200887},   {0x200888, 0x200888},   {0x200889, 0x20088E},
    {0x200890, 0x200891},   {0x1000898, 0x100089F}, {0x2008A0, 0x2008C8},   {0x2008C9, 0x2008C9},
    {0x10008CA, 0x10008E1}, {0x2008E2, 0x2008E2},   {0x10008E3, 0x10008FF}, {0x1000900, 0x1000902},
    {0x1000903, 0x1000903}, {0x200904, 0x200939},   {0x100093A, 0x100093A}, {0x100093B, 0x100093B},
    {0x100093C, 0x100093C}, {0x20093D, 0x20093D},   {0x100093E, 0x1000940}, {0x1000941, 0x1000948},
    {0x1000949, 0x100094C}, {0x100094D, 0x100094D}, {0x100094E, 0x100094F}, {0x200950, 0x200950},
    {0x1000951, 0x1000957}, {0x200958, 0x200961},   {0x1000962, 0x1000963}, {0x400964, 0x400965},
    {0x3800966, 0x380096F}, {0x200970, 0x200970},   {0x200971, 0x200971},   {0x200972, 0x20097F},
    {0x200980, 0x200980},   {0x1000981, 0x1000981}, {0x1000982, 0x1000983}, {0x200985, 0x20098C},
    {0x20098F, 0x200990},   {0x200993, 0x2009A8},   {0x2009AA, 0x2009B0},   {0x2009B2, 0x2009B2},
    {0x2009B6, 0x2009B9},   {0x10009BC, 0x10009BC}, {0x2009BD, 0x2009BD},   {0x10009BE, 0x10009C0},
    {0x10009C1, 0x10009C4}, {0x10009C7, 0x10009C8}, {0x10009CB, 0x10009CC}, {0x10009CD, 0x10009CD},
    {0x2009CE, 0x2009CE},   {0x10009D7, 0x10009D7}, {0x2009DC, 0x2009DD},   {0x2009DF, 0x2009E1},
    {0x10009E2, 0x10009E3}, {0x38009E6, 0x38009EF}, {0x2009F0, 0x2009F1},   {0x3C009F2, 0x3C009F3},
    {0x2009F4, 0x2009F8},   {0x3C009F9, 0x3C009F9}, {0x2009FA, 0x2009FA},   {0x3E009FB, 0x3E009FB},
    {0x2009FC, 0x2009FC},   {0x2009FD, 0x2009FD},   {0x10009FE, 0x10009FE}, {0x1000A01, 0x1000A02},
    {0x1000A03, 0x1000A03}, {0x200A05, 0x200A0A},   {0x200A0F, 0x200A10},   {0x200A13, 0x200A28},
    {0x200A2A, 0x200A30},   {0x200A32, 0x200A33},   {0x200A35, 0x200A36},   {0x200A38, 0x200A39},
    {0x1000A3C, 0x1000A3C}, {0x1000A3E, 0x1000A40}, {0x1000A41, 0x1000A42}, {0x1000A47, 0x1000A48},
    {0x1000A4B, 0x1000A4D}, {0x1000A51, 0x1000A51}, {0x200A59, 0x200A5C},   {0x200A5E, 0x200A5E},
    {0x3800A66, 0x3800A6F}, {0x1000A70, 0x1000A71}, {0x200A72, 0x200A74},   {0x1000A75, 0x1000A75},
    {0x200A76, 0x200A76},   {0x1000A81, 0x1000A82}, {0x1000A83, 0x1000A83}, {0x200A85, 0x200A8D},
    {0x200A8F, 0x200A91},   {0x200A93, 0x200AA8},   {0x200AAA, 0x200AB0},   {0x200AB2, 0x200AB3},
    {0x200AB5, 0x200AB9},   {0x1000ABC, 0x1000ABC}, {0x200ABD, 0x200ABD},   {0x1000ABE, 0x1000AC0},
    {0x1000AC1, 0x1000AC5}, {0x1000AC7, 0x1000AC8}, {0x1000AC9, 0x1000AC9}, {0x1000ACB, 0x1000ACC},
    {0x1000ACD, 0x1000ACD}, {0x200AD0, 0x200AD0},   {0x200AE0, 0x200AE1},   {0x1000AE2, 0x1000AE3},
    {0x3800AE6, 0x3800AEF}, {0x200AF0, 0x200AF0},   {0x3E00AF1, 0x3E00AF1}, {0x200AF9, 0x200AF9},
    {0x1000AFA, 0x1000AFF}, {0x1000B01, 0x1000B01}, {0x1000B02, 0x1000B03}, {0x200B05, 0x200B0C},
    {0x200B0F, 0x200B10},   {0x200B13, 0x200B28},   {0x200B2A, 0x200B30},   {0x200B32, 0x200B33},
    {0x200B35, 0x200B39},   {0x1000B3C, 0x1000B3C}, {0x200B3D, 0x200B3D},   {0x1000B3E, 0x1000B3E},
    {0x1000B3F, 0x1000B3F}, {0x1000B40, 0x1000B40}, {0x1000B41, 0x1000B44}, {0x1000B47, 0x1000B48},
    {0x1000B4B, 0x1000B4C}, {0x1000B4D, 0x1000B4D}, {0x1000B55, 0x1000B56}, {0x1000B57, 0x1000B57},
    {0x200B5C, 0x200B5D},   {0x200B5F, 0x200B61},   {0x1000B62, 0x1000B63}, {0x3800B66, 0x3800B6F},
    {0x200B70, 0x200B70},   {0x200B71, 0x200B71},   {0x200B72, 0x200B77},   {0x1000B82, 0x1000B82},
    {0x200B83, 0x200B83},   {0x200B85, 0x200B8A},   {0x200B8E, 0x200B90},   {0x200B92, 0x200B95},
    {0x200B99, 0x200B9A},   {0x200B9C, 0x200B9C},   {0x200B9E, 0x200B9F},   {0x200BA3, 0x200BA4},
    {0x200BA8, 0x200BAA},   {0x200BAE, 0x200BB9},   {0x1000BBE, 0x1000BBF}, {0x1000BC0, 0x1000BC0},
    {0x1000BC1, 0x1000BC2}, {0x1000BC6, 0x1000BC8}, {0x1000BCA, 0x1000BCC}, {0x1000BCD, 0x1000BCD},
    {0x200BD0, 0x200BD0},   {0x1000BD7, 0x1000BD7}, {0x3800BE6, 0x3800BEF}, {0x200BF0, 0x200BF2},
    {0x200BF3, 0x200BF8},   {0x3E00BF9, 0x3E00BF9}, {0x200BFA, 0x200BFA},   {0x1000C00, 0x1000C00},
    {0x1000C01, 0x1000C03}, {0x1000C04, 0x1000C04}, {0x200C05, 0x200C0C},   {0x200C0E, 0x200C10},
    {0x200C12, 0x200C28},   {0x200C2A, 0x200C39},   {0x1000C3C, 0x1000C3C}, {0x200C3D, 0x200C3D},
    {0x1000C3E, 0x1000C40}, {0x1000C41, 0x1000C44}, {0x1000C46, 0x1000C48}, {0x1000C4A, 0x1000C4D},
    {0x1000C55, 0x1000C56}, {0x200C58, 0x200C5A},   {0x200C5D, 0x200C5D},   {0x200C60, 0x200C61},
    {0x1000C62, 0x1000C63}, {0x3800C66, 0x3800C6F}, {0x600C77, 0x600C77},   {0x200C78, 0x200C7E},
    {0x200C7F, 0x200C7F},   {0x200C80, 0x200C80},   {0x1000C81, 0x1000C81}, {0x1000C82, 0x1000C83},
    {0x600C84, 0x600C84},   {0x200C85, 0x200C8C},   {0x200C8E, 0x200C90},   {0x200C92, 0x200CA8},
    {0x200CAA, 0x200CB3},   {0x200CB5, 0x200CB9},   {0x1000CBC, 0x1000CBC}, {0x200CBD, 0x200CBD},
    {0x1000CBE, 0x1000CBE}, {0x1000CBF, 0x1000CBF}, {0x1000CC0, 0x1000CC4}, {0x1000CC6, 0x1000CC6},
    {0x1000CC7, 0x1000CC8}, {0x1000CCA, 0x1000CCB}, {0x1000CCC, 0x1000CCD}, {0x1000CD5, 0x1000CD6},
    {0x200CDD, 0x200CDE},   {0x200CE0, 0x200CE1},   {0x1000CE2, 0x1000CE3}, {0x3800CE6, 0x3800CEF},
    {0x200CF1, 0x200CF2},   {0x1000D00, 0x1000D01}, {0x1000D02, 0x1000D03}, {0x200D04, 0x200D0C},
    {0x200D0E, 0x200D10},   {0x200D12, 0x200D3A},   {0x1000D3B, 0x1000D3C}, {0x200D3D, 0x200D3D},
    {0x1000D3E, 0x1000D40}, {0x1000D41, 0x1000D44}, {0x1000D46, 0x1000D48}, {0x1000D4A, 0x1000D4C},
    {0x1000D4D, 0x1000D4D}, {0x200D4E, 0x200D4E},   {0x200D4F, 0x200D4F},   {0x200D54, 0x200D56},
    {0x1000D57, 0x1000D57}, {0x200D58, 0x200D5E},   {0x200D5F, 0x200D61},   {0x1000D62, 0x1000D63},
    {0x3800D66, 0x3800D6F}, {0x200D70, 0x200D78},   {0x3C00D79, 0x3C00D79}, {0x200D7A, 0x200D7F},
    {0x1000D81, 0x1000D81}, {0x1000D82, 0x1000D83}, {0x200D85, 0x200D96},   {0x200D9A, 0x200DB1},
    {0x200DB3, 0x200DBB},   {0x200DBD, 0x200DBD},   {0x200DC0, 0x200DC6},   {0x1000DCA, 0x1000DCA},
    {0x1000DCF, 0x1000DD1}, {0x1000DD2, 0x1000DD4}, {0x1000DD6, 0x1000DD6}, {0x1000DD8, 0x1000DDF},
    {0x3800DE6, 0x3800DEF}, {0x1000DF2, 0x1000DF3}, {0x200DF4, 0x200DF4},   {0x200E01, 0x200E30},
    {0x1000E31, 0x1000E31}, {0x200E32, 0x200E33},   {0x1000E34, 0x1000E3A}, {0x3E00E3F, 0x3E00E3F},
    {0x200E40, 0x200E45},   {0x200E46, 0x200E46},   {0x1000E47, 0x1000E4E}, {0x200E4F, 0x200E4F},
    {0x3800E50, 0x3800E59}, {0x400E5A, 0x400E5B},   {0x200E81, 0x200E82},   {0x200E84, 0x200E84},
    {0x200E86, 0x200E8A},   {0x200E8C, 0x200EA3},   {0x200EA5, 0x200EA5},   {0x200EA7, 0x200EB0},
    {0x1000EB1, 0x1000EB1}, {0x200EB2, 0x200EB3},   {0x1000EB4, 0x1000EBC}, {0x200EBD, 0x200EBD},
    {0x200EC0, 0x200EC4},   {0x200EC6, 0x200EC6},   {0x1000EC8, 0x1000ECD}, {0x3800ED0, 0x3800ED9},
    {0x200EDC, 0x200EDF},   {0x200F00, 0x200F00},   {0x600F01, 0x600F03},   {0x600F04, 0x600F04},
    {0x200F05, 0x200F05},   {0x600F06, 0x600F07},   {0x1C00F08, 0x1C00F08}, {0x600F09, 0x600F0A},
    {0x400F0B, 0x400F0B},   {0x1C00F0C, 0x1C00F0C}, {0x1A00F0D, 0x1A00F11}, {0x1C00F12, 0x1C00F12},
    {0x200F13, 0x200F13},   {0x1A00F14, 0x1A00F14}, {0x200F15, 0x200F17},   {0x1000F18, 0x1000F19},
    {0x200F1A, 0x200F1F},   {0x3800F20, 0x3800F29}, {0x200F2A, 0x200F33},   {0x400F34, 0x400F34},
    {0x1000F35, 0x1000F35}, {0x200F36, 0x200F36},   {0x1000F37, 0x1000F37}, {0x200F38, 0x200F38},
    {0x1000F39, 0x1000F39}, {0x3A00F3A, 0x3A00F3A}, {0xE00F3B, 0xE00F3B},   {0x3A00F3C, 0x3A00F3C},
    {0xE00F3D, 0xE00F3D},   {0x1000F3E, 0x1000F3F}, {0x200F40, 0x200F47},   {0x200F49, 0x200F6C},
    {0x1000F71, 0x1000F7E}, {0x400F7F, 0x400F7F},   {0x1000F80, 0x1000F84}, {0x400F85, 0x400F85},
    {0x1000F86, 0x1000F87}, {0x200F88, 0x200F8C},   {0x1000F8D, 0x1000F97}, {0x1000F99, 0x1000FBC},
    {0x400FBE, 0x400FBF},   {0x200FC0, 0x200FC5},   {0x1000FC6, 0x1000FC6}, {0x200FC7, 0x200FCC},
    {0x200FCE, 0x200FCF},   {0x600FD0, 0x600FD1},   {0x400FD2, 0x400FD2},   {0x600FD3, 0x600FD3},
    {0x200FD4, 0x200FD4},   {0x200FD5, 0x200FD8},   {0x1C00FD9, 0x1C00FDA}, {0x201000, 0x20102A},
    {0x100102B, 0x100102C}, {0x100102D, 0x1001030}, {0x1001031, 0x1001031}, {0x1001032, 0x1001037},
    {0x1001038, 0x1001038}, {0x1001039, 0x100103A}, {0x100103B, 0x100103C}, {0x100103D, 0x100103E},
    {0x20103F, 0x20103F},   {0x3801040, 0x3801049}, {0x40104A, 0x40104B},   {0x20104C, 0x20104F},
    {0x201050, 0x201055},   {0x1001056, 0x1001057}, {0x1001058, 0x1001059}, {0x20105A, 0x20105D},
    {0x100105E, 0x1001060}, {0x201061, 0x201061},   {0x1001062, 0x1001064}, {0x201065, 0x201066},
    {0x1001067, 0x100106D}, {0x20106E, 0x201070},   {0x1001071, 0x1001074}, {0x201075, 0x201081},
    {0x1001082, 0x1001082}, {0x1001083, 0x1001084}, {0x1001085, 0x1001086}, {0x1001087, 0x100108C},
    {0x100108D, 0x100108D}, {0x20108E, 0x20108E},   {0x100108F, 0x100108F}, {0x3801090, 0x3801099},
    {0x100109A, 0x100109C}, {0x100109D, 0x100109D}, {0x20109E, 0x20109F},   {0x2010A0, 0x2010C5},
    {0x2010C7, 0x2010C7},   {0x2010CD, 0x2010CD},   {0x2010D0, 0x2010FA},   {0x2010FB, 0x2010FB},
    {0x2010FC, 0x2010FC},   {0x2010FD, 0x2010FF},   {0x2C01100, 0x2C0115F}, {0x3001160, 0x30011A7},
    {0x2E011A8, 0x2E011FF}, {0x201200, 0x201248},   {0x20124A, 0x20124D},   {0x201250, 0x201256},
    {0x201258, 0x201258},   {0x20125A, 0x20125D},   {0x201260, 0x201288},   {0x20128A, 0x20128D},
    {0x201290, 0x2012B0},   {0x2012B2, 0x2012B5},   {0x2012B8, 0x2012BE},   {0x2012C0, 0x2012C0},
    {0x2012C2, 0x2012C5},   {0x2012C8, 0x2012D6},   {0x2012D8, 0x201310},   {0x201312, 0x201315},
    {0x201318, 0x20135A},   {0x100135D, 0x100135F}, {0x201360, 0x201360},   {0x401361, 0x401361},
    {0x201362, 0x201368},   {0x201369, 0x20137C},   {0x201380, 0x20138F},   {0x201390, 0x201399},
    {0x2013A0, 0x2013F5},   {0x2013F8, 0x2013FD},   {0x401400, 0x401400},   {0x201401, 0x20166C},
    {0x20166D, 0x20166D},   {0x20166E, 0x20166E},   {0x20166F, 0x20167F},   {0x401680, 0x401680},
    {0x201681, 0x20169A},   {0x3A0169B, 0x3A0169B}, {0xE0169C, 0xE0169C},   {0x2016A0, 0x2016EA},
    {0x4016EB, 0x4016ED},   {0x2016EE, 0x2016F0},   {0x2016F1, 0x2016F8},   {0x201700, 0x201711},
    {0x1001712, 0x1001714}, {0x1001715, 0x1001715}, {0x20171F, 0x20171F},   {0x201720, 0x201731},
    {0x1001732, 0x1001733}, {0x1001734, 0x1001734}, {0x401735, 0x401736},   {0x201740, 0x201751},
    {0x1001752, 0x1001753}, {0x201760, 0x20176C},   {0x20176E, 0x201770},   {0x1001772, 0x1001773},
    {0x201780, 0x2017B3},   {0x10017B4, 0x10017B5}, {0x10017B6, 0x10017B6}, {0x10017B7, 0x10017BD},
    {0x10017BE, 0x10017C5}, {0x10017C6, 0x10017C6}, {0x10017C7, 0x10017C8}, {0x10017C9, 0x10017D3},
    {0x4017D4, 0x4017D5},   {0x36017D6, 0x36017D6}, {0x2017D7, 0x2017D7},   {0x4017D8, 0x4017D8},
    {0x2017D9, 0x2017D9},   {0x4017DA, 0x4017DA},   {0x3E017DB, 0x3E017DB}, {0x2017DC, 0x2017DC},
    {0x10017DD, 0x10017DD}, {0x38017E0, 0x38017E9}, {0x2017F0, 0x2017F9},   {0x201800, 0x201801},
    {0x1A01802, 0x1A01803}, {0x401804, 0x401805},   {0x601806, 0x601806},   {0x201807, 0x201807},
    {0x1A01808, 0x1A01809}, {0x20180A, 0x20180A},   {0x100180B, 0x100180D}, {0x1C0180E, 0x1C0180E},
    {0x100180F, 0x100180F}, {0x3801810, 0x3801819}, {0x201820, 0x201842},   {0x201843, 0x201843},
    {0x201844, 0x201878},   {0x201880, 0x201884},   {0x1001885, 0x1001886}, {0x201887, 0x2018A8},
    {0x10018A9, 0x10018A9}, {0x2018AA, 0x2018AA},   {0x2018B0, 0x2018F5},   {0x201900, 0x20191E},
    {0x1001920, 0x1001922}, {0x1001923, 0x1001926}, {0x1001927, 0x1001928}, {0x1001929, 0x100192B},
    {0x1001930, 0x1001931}, {0x1001932, 0x1001932}, {0x1001933, 0x1001938}, {0x1001939, 0x100193B},
    {0x201940, 0x201940},   {0x1A01944, 0x1A01945}, {0x3801946, 0x380194F}, {0x201950, 0x20196D},
    {0x201970, 0x201974},   {0x201980, 0x2019AB},   {0x2019B0, 0x2019C9},   {0x38019D0, 0x38019D9},
    {0x2019DA, 0x2019DA},   {0x2019DE, 0x2019DF},   {0x2019E0, 0x2019FF},   {0x201A00, 0x201A16},
    {0x1001A17, 0x1001A18}, {0x1001A19, 0x1001A1A}, {0x1001A1B, 0x1001A1B}, {0x201A1E, 0x201A1F},
    {0x201A20, 0x201A54},   {0x1001A55, 0x1001A55}, {0x1001A56, 0x1001A56}, {0x1001A57, 0x1001A57},
    {0x1001A58, 0x1001A5E}, {0x1001A60, 0x1001A60}, {0x1001A61, 0x1001A61}, {0x1001A62, 0x1001A62},
    {0x1001A63, 0x1001A64}, {0x1001A65, 0x1001A6C}, {0x1001A6D, 0x1001A72}, {0x1001A73, 0x1001A7C},
    {0x1001A7F, 0x1001A7F}, {0x3801A80, 0x3801A89}, {0x3801A90, 0x3801A99}, {0x201AA0, 0x201AA6},
    {0x201AA7, 0x201AA7},   {0x201AA8, 0x201AAD},   {0x1001AB0, 0x1001ABD}, {0x1001ABE, 0x1001ABE},
    {0x1001ABF, 0x1001ACE}, {0x1001B00, 0x1001B03}, {0x1001B04, 0x1001B04}, {0x201B05, 0x201B33},
    {0x1001B34, 0x1001B34}, {0x1001B35, 0x1001B35}, {0x1001B36, 0x1001B3A}, {0x1001B3B, 0x1001B3B},
    {0x1001B3C, 0x1001B3C}, {0x1001B3D, 0x1001B41}, {0x1001B42, 0x1001B42}, {0x1001B43, 0x1001B44},
    {0x201B45, 0x201B4C},   {0x3801B50, 0x3801B59}, {0x401B5A, 0x401B5B},   {0x201B5C, 0x201B5C},
    {0x401B5D, 0x401B60},   {0x201B61, 0x201B6A},   {0x1001B6B, 0x1001B73}, {0x201B74, 0x201B7C},
    {0x401B7D, 0x401B7E},   {0x1001B80, 0x1001B81}, {0x1001B82, 0x1001B82}, {0x201B83, 0x201BA0},
    {0x1001BA1, 0x1001BA1}, {0x1001BA2, 0x1001BA5}, {0x1001BA6, 0x1001BA7}, {0x1001BA8, 0x1001BA9},
    {0x1001BAA, 0x1001BAA}, {0x1001BAB, 0x1001BAD}, {0x201BAE, 0x201BAF},   {0x3801BB0, 0x3801BB9},
    {0x201BBA, 0x201BBF},   {0x201BC0, 0x201BE5},   {0x1001BE6, 0x1001BE6}, {0x1001BE7, 0x1001BE7},
    {0x1001BE8, 0x1001BE9}, {0x1001BEA, 0x1001BEC}, {0x1001BED, 0x1001BED}, {0x1001BEE, 0x1001BEE},
    {0x1001BEF, 0x1001BF1}, {0x1001BF2, 0x1001BF3}, {0x201BFC, 0x201BFF},   {0x201C00, 0x201C23},
    {0x1001C24, 0x1001C2B}, {0x1001C2C, 0x1001C33}, {0x1001C34, 0x1001C35}, {0x1001C36, 0x1001C37},
    {0x401C3B, 0x401C3F},   {0x3801C40, 0x3801C49}, {0x201C4D, 0x201C4F},   {0x3801C50, 0x3801C59},
    {0x201C5A, 0x201C77},   {0x201C78, 0x201C7D},   {0x401C7E, 0x401C7F},   {0x201C80, 0x201C88},
    {0x201C90, 0x201CBA},   {0x201CBD, 0x201CBF},   {0x201CC0, 0x201CC7},   {0x1001CD0, 0x1001CD2},
    {0x201CD3, 0x201CD3},   {0x1001CD4, 0x1001CE0}, {0x1001CE1, 0x1001CE1}, {0x1001CE2, 0x1001CE8},
    {0x201CE9, 0x201CEC},   {0x1001CED, 0x1001CED}, {0x201CEE, 0x201CF3},   {0x1001CF4, 0x1001CF4},
    {0x201CF5, 0x201CF6},   {0x1001CF7, 0x1001CF7}, {0x1001CF8, 0x1001CF9}, {0x201CFA, 0x201CFA},
    {0x201D00, 0x201D2B},   {0x201D2C, 0x201D6A},   {0x201D6B, 0x201D77},   {0x201D78, 0x201D78},
    {0x201D79, 0x201D7F},   {0x201D80, 0x201D9A},   {0x201D9B, 0x201DBF},   {0x1001DC0, 0x1001DFF},
    {0x201E00, 0x201EFF},   {0x201F00, 0x201F15},   {0x201F18, 0x201F1D},   {0x201F20, 0x201F45},
    {0x201F48, 0x201F4D},   {0x201F50, 0x201F57},   {0x201F59, 0x201F59},   {0x201F5B, 0x201F5B},
    {0x201F5D, 0x201F5D},   {0x201F5F, 0x201F7D},   {0x201F80, 0x201FB4},   {0x201FB6, 0x201FBC},
    {0x201FBD, 0x201FBD},   {0x201FBE, 0x201FBE},   {0x201FBF, 0x201FC1},   {0x201FC2, 0x201FC4},
    {0x201FC6, 0x201FCC},   {0x201FCD, 0x201FCF},   {0x201FD0, 0x201FD3},   {0x201FD6, 0x201FDB},
    {0x201FDD, 0x201FDF},   {0x201FE0, 0x201FEC},   {0x201FED, 0x201FEF},   {0x201FF2, 0x201FF4},
    {0x201FF6, 0x201FFC},   {0x601FFD, 0x601FFD},   {0x201FFE, 0x201FFE},   {0x402000, 0x402006},
    {0x1C02007, 0x1C02007}, {0x402008, 0x40200A},   {0x4A0200B, 0x4A0200B}, {0x100200C, 0x100200C},
    {0x4C0200D, 0x4C0200D}, {0x100200E, 0x100200F}, {0x402010, 0x402010},   {0x1C02011, 0x1C02011},
    {0x402012, 0x402013},   {0x802014, 0x802014},   {0x202015, 0x202015},   {0x202016, 0x202016},
    {0x202017, 0x202017},   {0x4002018, 0x4002018}, {0x4002019, 0x4002019}, {0x3A0201A, 0x3A0201A},
    {0x400201B, 0x400201C}, {0x400201D, 0x400201D}, {0x3A0201E, 0x3A0201E}, {0x400201F, 0x400201F},
    {0x202020, 0x202021},   {0x202022, 0x202023},   {0x2802024, 0x2802026}, {0x402027, 0x402027},
    {0xA02028, 0xA02028},   {0xA02029, 0xA02029},   {0x100202A, 0x100202E}, {0x1C0202F, 0x1C0202F},
    {0x3C02030, 0x3C02037}, {0x202038, 0x202038},   {0x4002039, 0x4002039}, {0x400203A, 0x400203A},
    {0x20203B, 0x20203B},   {0x360203C, 0x360203D}, {0x20203E, 0x20203E},   {0x20203F, 0x202040},
    {0x202041, 0x202043},   {0x2A02044, 0x2A02044}, {0x3A02045, 0x3A02045}, {0xE02046, 0xE02046},
    {0x3602047, 0x3602049}, {0x20204A, 0x202051},   {0x202052, 0x202052},   {0x202053, 0x202053},
    {0x202054, 0x202054},   {0x202055, 0x202055},   {0x402056, 0x402056},   {0x202057, 0x202057},
    {0x402058, 0x40205B},   {0x20205C, 0x20205C},   {0x40205D, 0x40205E},   {0x40205F, 0x40205F},
    {0x4802060, 0x4802060}, {0x202061, 0x202064},   {0x1002066, 0x100206F}, {0x202070, 0x202070},
    {0x202071, 0x202071},   {0x202074, 0x202074},   {0x202075, 0x202079},   {0x20207A, 0x20207C},
    {0x3A0207D, 0x3A0207D}, {0xE0207E, 0xE0207E},   {0x20207F, 0x20207F},   {0x202080, 0x202080},
    {0x202081, 0x202084},   {0x202085, 0x202089},   {0x20208A, 0x20208C},   {0x3A0208D, 0x3A0208D},
    {0xE0208E, 0xE0208E},   {0x202090, 0x20209C},   {0x3E020A0, 0x3E020A6}, {0x3C020A7, 0x3C020A7},
    {0x3E020A8, 0x3E020B5}, {0x3C020B6, 0x3C020B6}, {0x3E020B7, 0x3E020BA}, {0x3C020BB, 0x3C020BB},
    {0x3E020BC, 0x3E020BD}, {0x3C020BE, 0x3C020BE}, {0x3E020BF, 0x3E020BF}, {0x3C020C0, 0x3C020C0},
    {0x3E020C1, 0x3E020CF}, {0x10020D0, 0x10020DC}, {0x10020DD, 0x10020E0}, {0x10020E1, 0x10020E1},
    {0x10020E2, 0x10020E4}, {0x10020E5, 0x10020F0}, {0x202100, 0x202101},   {0x202102, 0x202102},
    {0x3C02103, 0x3C02103}, {0x202104, 0x202104},   {0x202105, 0x202105},   {0x202106, 0x202106},
    {0x202107, 0x202107},   {0x202108, 0x202108},   {0x3C02109, 0x3C02109}, {0x20210A, 0x202112},
    {0x202113, 0x202113},   {0x202114, 0x202114},   {0x202115, 0x202115},   {0x3E02116, 0x3E02116},
    {0x202117, 0x202117},   {0x202118, 0x202118},   {0x202119, 0x20211D},   {0x20211E, 0x202120},
    {0x202121, 0x202122},   {0x202123, 0x202123},   {0x202124, 0x202124},   {0x202125, 0x202125},
    {0x202126, 0x202126},   {0x202127, 0x202127},   {0x202128, 0x202128},   {0x202129, 0x202129},
    {0x20212A, 0x20212A},   {0x20212B, 0x20212B},   {0x20212C, 0x20212D},   {0x20212E, 0x20212E},
    {0x20212F, 0x202134},   {0x202135, 0x202138},   {0x202139, 0x202139},   {0x20213A, 0x20213B},
    {0x20213C, 0x20213F},   {0x202140, 0x202144},   {0x202145, 0x202149},   {0x20214A, 0x20214A},
    {0x20214B, 0x20214B},   {0x20214C, 0x20214D},   {0x20214E, 0x20214E},   {0x20214F, 0x20214F},
    {0x202150, 0x202153},   {0x202154, 0x202155},   {0x202156, 0x20215A},   {0x20215B, 0x20215B},
    {0x20215C, 0x20215D},   {0x20215E, 0x20215E},   {0x20215F, 0x20215F},   {0x202160, 0x20216B},
    {0x20216C, 0x20216F},   {0x202170, 0x202179},   {0x20217A, 0x202182},   {0x202183, 0x202184},
    {0x202185, 0x202188},   {0x202189, 0x202189},   {0x20218A, 0x20218B},   {0x202190, 0x202194},
    {0x202195, 0x202199},   {0x20219A, 0x20219B},   {0x20219C, 0x20219F},   {0x2021A0, 0x2021A0},
    {0x2021A1, 0x2021A2},   {0x2021A3, 0x2021A3},   {0x2021A4, 0x2021A5},   {0x2021A6, 0x2021A6},
    {0x2021A7, 0x2021AD},   {0x2021AE, 0x2021AE},   {0x2021AF, 0x2021CD},   {0x2021CE, 0x2021CF},
    {0x2021D0, 0x2021D1},   {0x2021D2, 0x2021D2},   {0x2021D3, 0x2021D3},   {0x2021D4, 0x2021D4},
    {0x2021D5, 0x2021F3},   {0x2021F4, 0x2021FF},   {0x202200, 0x202200},   {0x202201, 0x202201},
    {0x202202, 0x202203},   {0x202204, 0x202206},   {0x202207, 0x202208},   {0x202209, 0x20220A},
    {0x20220B, 0x20220B},   {0x20220C, 0x20220E},   {0x20220F, 0x20220F},   {0x202210, 0x202210},
    {0x202211, 0x202211},   {0x3E02212, 0x3E02213}, {0x202214, 0x202214},   {0x202215, 0x202215},
    {0x202216, 0x202219},   {0x20221A, 0x20221A},   {0x20221B, 0x20221C},   {0x20221D, 0x202220},
    {0x202221, 0x202222},   {0x202223, 0x202223},   {0x202224, 0x202224},   {0x202225, 0x202225},
    {0x202226, 0x202226},   {0x202227, 0x20222C},   {0x20222D, 0x20222D},   {0x20222E, 0x20222E},
    {0x20222F, 0x202233},   {0x202234, 0x202237},   {0x202238, 0x20223B},   {0x20223C, 0x20223D},
    {0x20223E, 0x202247},   {0x202248, 0x202248},   {0x202249, 0x20224B},   {0x20224C, 0x20224C},
    {0x20224D, 0x202251},   {0x202252, 0x202252},   {0x202253, 0x20225F},   {0x202260, 0x202261},
    {0x202262, 0x202263},   {0x202264, 0x202267},   {0x202268, 0x202269},   {0x20226A, 0x20226B},
    {0x20226C, 0x20226D},   {0x20226E, 0x20226F},   {0x202270, 0x202281},   {0x202282, 0x202283},
    {0x202284, 0x202285},   {0x202286, 0x202287},   {0x202288, 0x202294},   {0x202295, 0x202295},
    {0x202296, 0x202298},   {0x202299, 0x202299},   {0x20229A, 0x2022A4},   {0x2022A5, 0x2022A5},
    {0x2022A6, 0x2022BE},   {0x2022BF, 0x2022BF},   {0x2022C0, 0x2022EE},   {0x28022EF, 0x28022EF},
    {0x2022F0, 0x2022FF},   {0x202300, 0x202307},   {0x3A02308, 0x3A02308}, {0xE02309, 0xE02309},
    {0x3A0230A, 0x3A0230A}, {0xE0230B, 0xE0230B},   {0x20230C, 0x202311},   {0x202312, 0x202312},
    {0x202313, 0x202319},   {0x240231A, 0x240231B}, {0x20231C, 0x20231F},   {0x202320, 0x202321},
    {0x202322, 0x202328},   {0x3A02329, 0x3A02329}, {0xE0232A, 0xE0232A},   {0x20232B, 0x20237B},
    {0x20237C, 0x20237C},   {0x20237D, 0x20239A},   {0x20239B, 0x2023B3},   {0x2023B4, 0x2023DB},
    {0x2023DC, 0x2023E1},   {0x2023E2, 0x2023EF},   {0x24023F0, 0x24023F3}, {0x2023F4, 0x2023FF},
    {0x202400, 0x202426},   {0x202440, 0x20244A},   {0x202460, 0x20249B},   {0x20249C, 0x2024E9},
    {0x2024EA, 0x2024FE},   {0x2024FF, 0x2024FF},   {0x202500, 0x20254B},   {0x20254C, 0x20254F},
    {0x202550, 0x202574},   {0x202575, 0x20257F},   {0x202580, 0x20258F},   {0x202590, 0x202591},
    {0x202592, 0x202595},   {0x202596, 0x20259F},   {0x2025A0, 0x2025A1},   {0x2025A2, 0x2025A2},
    {0x2025A3, 0x2025A9},   {0x2025AA, 0x2025B1},   {0x2025B2, 0x2025B3},   {0x2025B4, 0x2025B5},
    {0x2025B6, 0x2025B6},   {0x2025B7, 0x2025B7},   {0x2025B8, 0x2025BB},   {0x2025BC, 0x2025BD},
    {0x2025BE, 0x2025BF},   {0x2025C0, 0x2025C0},   {0x2025C1, 0x2025C1},   {0x2025C2, 0x2025C5},
    {0x2025C6, 0x2025C8},   {0x2025C9, 0x2025CA},   {0x2025CB, 0x2025CB},   {0x2025CC, 0x2025CD},
    {0x2025CE, 0x2025D1},   {0x2025D2, 0x2025E1},   {0x2025E2, 0x2025E5},   {0x2025E6, 0x2025EE},
    {0x2025EF, 0x2025EF},   {0x2025F0, 0x2025F7},   {0x2025F8, 0x2025FF},   {0x2402600, 0x2402603},
    {0x202604, 0x202604},   {0x202605, 0x202606},   {0x202607, 0x202608},   {0x202609, 0x202609},
    {0x20260A, 0x20260D},   {0x20260E, 0x20260F},   {0x202610, 0x202613},   {0x2402614, 0x2402615},
    {0x202616, 0x202617},   {0x2402618, 0x2402618}, {0x202619, 0x202619},   {0x240261A, 0x240261C},
    {0x160261D, 0x160261D}, {0x240261E, 0x240261F}, {0x202620, 0x202638},   {0x2402639, 0x240263B},
    {0x20263C, 0x20263F},   {0x202640, 0x202640},   {0x202641, 0x202641},   {0x202642, 0x202642},
    {0x202643, 0x20265F},   {0x202660, 0x202661},   {0x202662, 0x202662},   {0x202663, 0x202665},
    {0x202666, 0x202666},   {0x202667, 0x202667},   {0x2402668, 0x2402668}, {0x202669, 0x20266A},
    {0x20266B, 0x20266B},   {0x20266C, 0x20266D},   {0x20266E, 0x20266E},   {0x20266F, 0x20266F},
    {0x202670, 0x20267E},   {0x240267F, 0x240267F}, {0x202680, 0x20269D},   {0x20269E, 0x20269F},
    {0x2026A0, 0x2026BC},   {0x24026BD, 0x24026C8}, {0x2026C9, 0x2026CC},   {0x24026CD, 0x24026CD},
    {0x2026CE, 0x2026CE},   {0x24026CF, 0x24026D1}, {0x2026D2, 0x2026D2},   {0x24026D3, 0x24026D4},
    {0x2026D5, 0x2026D7},   {0x24026D8, 0x24026D9}, {0x2026DA, 0x2026DB},   {0x24026DC, 0x24026DC},
    {0x2026DD, 0x2026DE},   {0x24026DF, 0x24026E1}, {0x2026E2, 0x2026E2},   {0x2026E3, 0x2026E3},
    {0x2026E4, 0x2026E7},   {0x2026E8, 0x2026E9},   {0x24026EA, 0x24026EA}, {0x2026EB, 0x2026F0},
    {0x24026F1, 0x24026F5}, {0x2026F6, 0x2026F6},   {0x24026F7, 0x24026F8}, {0x16026F9, 0x16026F9},
    {0x24026FA, 0x24026FA}, {0x2026FB, 0x2026FC},   {0x24026FD, 0x24026FF}, {0x2402700, 0x2402704},
    {0x202705, 0x202707},   {0x2402708, 0x2402709}, {0x160270A, 0x160270D}, {0x20270E, 0x202756},
    {0x202757, 0x202757},   {0x202758, 0x20275A},   {0x400275B, 0x4002760}, {0x202761, 0x202761},
    {0x1A02762, 0x1A02763}, {0x2402764, 0x2402764}, {0x202765, 0x202767},   {0x3A02768, 0x3A02768},
    {0xE02769, 0xE02769},   {0x3A0276A, 0x3A0276A}, {0xE0276B, 0xE0276B},   {0x3A0276C, 0x3A0276C},
    {0xE0276D, 0xE0276D},   {0x3A0276E, 0x3A0276E}, {0xE0276F, 0xE0276F},   {0x3A02770, 0x3A02770},
    {0xE02771, 0xE02771},   {0x3A02772, 0x3A02772}, {0xE02773, 0xE02773},   {0x3A02774, 0x3A02774},
    {0xE02775, 0xE02775},   {0x202776, 0x202793},   {0x202794, 0x2027BF},   {0x2027C0, 0x2027C4},
    {0x3A027C5, 0x3A027C5}, {0xE027C6, 0xE027C6},   {0x2027C7, 0x2027E5},   {0x3A027E6, 0x3A027E6},
    {0xE027E7, 0xE027E7},   {0x3A027E8, 0x3A027E8}, {0xE027E9, 0xE027E9},   {0x3A027EA, 0x3A027EA},
    {0xE027EB, 0xE027EB},   {0x3A027EC, 0x3A027EC}, {0xE027ED, 0xE027ED},   {0x3A027EE, 0x3A027EE},
    {0xE027EF, 0xE027EF},   {0x2027F0, 0x2027FF},   {0x202800, 0x2028FF},   {0x202900, 0x20297F},
    {0x202980, 0x202982},   {0x3A02983, 0x3A02983}, {0xE02984, 0xE02984},   {0x3A02985, 0x3A02985},
    {0xE02986, 0xE02986},   {0x3A02987, 0x3A02987}, {0xE02988, 0xE02988},   {0x3A02989, 0x3A02989},
    {0xE0298A, 0xE0298A},   {0x3A0298B, 0x3A0298B}, {0xE0298C, 0xE0298C},   {0x3A0298D, 0x3A0298D},
    {0xE0298E, 0xE0298E},   {0x3A0298F, 0x3A0298F}, {0xE02990, 0xE02990},   {0x3A02991, 0x3A02991},
    {0xE02992, 0xE02992},   {0x3A02993, 0x3A02993}, {0xE02994, 0xE02994},   {0x3A02995, 0x3A02995},
    {0xE02996, 0xE02996},   {0x3A02997, 0x3A02997}, {0xE02998, 0xE02998},   {0x202999, 0x2029D7},
    {0x3A029D8, 0x3A029D8}, {0xE029D9, 0xE029D9},   {0x3A029DA, 0x3A029DA}, {0xE029DB, 0xE029DB},
    {0x2029DC, 0x2029FB},   {0x3A029FC, 0x3A029FC}, {0xE029FD, 0xE029FD},   {0x2029FE, 0x2029FF},
    {0x202A00, 0x202AFF},   {0x202B00, 0x202B2F},   {0x202B30, 0x202B44},   {0x202B45, 0x202B46},
    {0x202B47, 0x202B4C},   {0x202B4D, 0x202B54},   {0x202B55, 0x202B59},   {0x202B5A, 0x202B73},
    {0x202B76, 0x202B95},   {0x202B97, 0x202BFF},   {0x202C00, 0x202C5F},   {0x202C60, 0x202C7B},
    {0x202C7C, 0x202C7D},   {0x202C7E, 0x202C7F},   {0x202C80, 0x202CE4},   {0x202CE5, 0x202CEA},
    {0x202CEB, 0x202CEE},   {0x1002CEF, 0x1002CF1}, {0x202CF2, 0x202CF3},   {0x1A02CF9, 0x1A02CF9},
    {0x402CFA, 0x402CFC},   {0x202CFD, 0x202CFD},   {0x1A02CFE, 0x1A02CFE}, {0x402CFF, 0x402CFF},
    {0x202D00, 0x202D25},   {0x202D27, 0x202D27},   {0x202D2D, 0x202D2D},   {0x202D30, 0x202D67},
    {0x202D6F, 0x202D6F},   {0x402D70, 0x402D70},   {0x1002D7F, 0x1002D7F}, {0x202D80, 0x202D96},
    {0x202DA0, 0x202DA6},   {0x202DA8, 0x202DAE},   {0x202DB0, 0x202DB6},   {0x202DB8, 0x202DBE},
    {0x202DC0, 0x202DC6},   {0x202DC8, 0x202DCE},   {0x202DD0, 0x202DD6},   {0x202DD8, 0x202DDE},
    {0x1002DE0, 0x1002DFF}, {0x4002E00, 0x4002E01}, {0x4002E02, 0x4002E02}, {0x4002E03, 0x4002E03},
    {0x4002E04, 0x4002E04}, {0x4002E05, 0x4002E05}, {0x4002E06, 0x4002E08}, {0x4002E09, 0x4002E09},
    {0x4002E0A, 0x4002E0A}, {0x4002E0B, 0x4002E0B}, {0x4002E0C, 0x4002E0C}, {0x4002E0D, 0x4002E0D},
    {0x402E0E, 0x402E15},   {0x202E16, 0x202E16},   {0x402E17, 0x402E17},   {0x3A02E18, 0x3A02E18},
    {0x402E19, 0x402E19},   {0x202E1A, 0x202E1A},   {0x202E1B, 0x202E1B},   {0x4002E1C, 0x4002E1C},
    {0x4002E1D, 0x4002E1D}, {0x202E1E, 0x202E1F},   {0x4002E20, 0x4002E20}, {0x4002E21, 0x4002E21},
    {0x3A02E22, 0x3A02E22}, {0xE02E23, 0xE02E23},   {0x3A02E24, 0x3A02E24}, {0xE02E25, 0xE02E25},
    {0x3A02E26, 0x3A02E26}, {0xE02E27, 0xE02E27},   {0x3A02E28, 0x3A02E28}, {0xE02E29, 0xE02E29},
    {0x402E2A, 0x402E2D},   {0x1A02E2E, 0x1A02E2E}, {0x202E2F, 0x202E2F},   {0x402E30, 0x402E31},
    {0x202E32, 0x202E32},   {0x402E33, 0x402E34},   {0x202E35, 0x202E39},   {0x802E3A, 0x802E3B},
    {0x402E3C, 0x402E3E},   {0x202E3F, 0x202E3F},   {0x402E40, 0x402E40},   {0x402E41, 0x402E41},
    {0x3A02E42, 0x3A02E42}, {0x402E43, 0x402E4A},   {0x202E4B, 0x202E4B},   {0x402E4C, 0x402E4C},
    {0x202E4D, 0x202E4D},   {0x402E4E, 0x402E4F},   {0x202E50, 0x202E51},   {0x202E52, 0x202E52},
    {0x1A02E53, 0x1A02E54}, {0x3A02E55, 0x3A02E55}, {0xE02E56, 0xE02E56},   {0x3A02E57, 0x3A02E57},
    {0xE02E58, 0xE02E58},   {0x3A02E59, 0x3A02E59}, {0xE02E5A, 0xE02E5A},   {0x3A02E5B, 0x3A02E5B},
    {0xE02E5C, 0xE02E5C},   {0x402E5D, 0x402E5D},   {0x2402E80, 0x2402E99}, {0x2402E9B, 0x2402EF3},
    {0x2402F00, 0x2402FD5}, {0x2402FF0, 0x2402FFB}, {0x403000, 0x403000},   {0xE03001, 0xE03002},
    {0x2403003, 0x2403003}, {0x2403004, 0x2403004}, {0x3603005, 0x3603005}, {0x2403006, 0x2403006},
    {0x2403007, 0x2403007}, {0x3A03008, 0x3A03008}, {0xE03009, 0xE03009},   {0x3A0300A, 0x3A0300A},
    {0xE0300B, 0xE0300B},   {0x3A0300C, 0x3A0300C}, {0xE0300D, 0xE0300D},   {0x3A0300E, 0x3A0300E},
    {0xE0300F, 0xE0300F},   {0x3A03010, 0x3A03010}, {0xE03011, 0xE03011},   {0x2403012, 0x2403013},
    {0x3A03014, 0x3A03014}, {0xE03015, 0xE03015},   {0x3A03016, 0x3A03016}, {0xE03017, 0xE03017},
    {0x3A03018, 0x3A03018}, {0xE03019, 0xE03019},   {0x3A0301A, 0x3A0301A}, {0xE0301B, 0xE0301B},
    {0x360301C, 0x360301C}, {0x3A0301D, 0x3A0301D}, {0xE0301E, 0xE0301F},   {0x2403020, 0x2403020},
    {0x2403021, 0x2403029}, {0x100302A, 0x100302D}, {0x100302E, 0x100302F}, {0x2403030, 0x2403030},
    {0x2403031, 0x2403034}, {0x1003035, 0x1003035}, {0x2403036, 0x2403037}, {0x2403038, 0x240303A},
    {0x360303B, 0x360303B}, {0x360303C, 0x360303C}, {0x240303D, 0x240303D}, {0x240303E, 0x240303F},
    {0x3603041, 0x3603041}, {0x2403042, 0x2403042}, {0x3603043, 0x3603043}, {0x2403044, 0x2403044},
    {0x3603045, 0x3603045}, {0x2403046, 0x2403046}, {0x3603047, 0x3603047}, {0x2403048, 0x2403048},
    {0x3603049, 0x3603049}, {0x240304A, 0x2403062}, {0x3603063, 0x3603063}, {0x2403064, 0x2403082},
    {0x3603083, 0x3603083}, {0x2403084, 0x2403084}, {0x3603085, 0x3603085}, {0x2403086, 0x2403086},
    {0x3603087, 0x3603087}, {0x2403088, 0x240308D}, {0x360308E, 0x360308E}, {0x240308F, 0x2403094},
    {0x3603095, 0x3603096}, {0x1003099, 0x100309A}, {0x360309B, 0x360309C}, {0x360309D, 0x360309E},
    {0x240309F, 0x240309F}, {0x36030A0, 0x36030A0}, {0x36030A1, 0x36030A1}, {0x24030A2, 0x24030A2},
    {0x36030A3, 0x36030A3}, {0x24030A4, 0x24030A4}, {0x36030A5, 0x36030A5}, {0x24030A6, 0x24030A6},
    {0x36030A7, 0x36030A7}, {0x24030A8, 0x24030A8}, {0x36030A9, 0x36030A9}, {0x24030AA, 0x24030C2},
    {0x36030C3, 0x36030C3}, {0x24030C4, 0x24030E2}, {0x36030E3, 0x36030E3}, {0x24030E4, 0x24030E4},
    {0x36030E5, 0x36030E5}, {0x24030E6, 0x24030E6}, {0x36030E7, 0x36030E7}, {0x24030E8, 0x24030ED},
    {0x36030EE, 0x36030EE}, {0x24030EF, 0x24030F4}, {0x36030F5, 0x36030F6}, {0x24030F7, 0x24030FA},
    {0x36030FB, 0x36030FB}, {0x36030FC, 0x36030FC}, {0x36030FD, 0x36030FE}, {0x24030FF, 0x24030FF},
    {0x2403105, 0x240312F}, {0x2403131, 0x240318E}, {0x2403190, 0x2403191}, {0x2403192, 0x2403195},
    {0x2403196, 0x240319F}, {0x24031A0, 0x24031BF}, {0x24031C0, 0x24031E3}, {0x36031F0, 0x36031FF},
    {0x2403200, 0x240321E}, {0x2403220, 0x2403229}, {0x240322A, 0x2403247}, {0x203248, 0x20324F},
    {0x2403250, 0x2403250}, {0x2403251, 0x240325F}, {0x2403260, 0x240327F}, {0x2403280, 0x2403289},
    {0x240328A, 0x24032B0}, {0x24032B1, 0x24032BF}, {0x24032C0, 0x24032FF}, {0x2403300, 0x24033FF},
    {0x2403400, 0x2404DBF}, {0x204DC0, 0x204DFF},   {0x2404E00, 0x2409FFF}, {0x240A000, 0x240A014},
    {0x360A015, 0x360A015}, {0x240A016, 0x240A48C}, {0x240A490, 0x240A4C6}, {0x20A4D0, 0x20A4F7},
    {0x20A4F8, 0x20A4FD},   {0x40A4FE, 0x40A4FF},   {0x20A500, 0x20A60B},   {0x20A60C, 0x20A60C},
    {0x40A60D, 0x40A60D},   {0x1A0A60E, 0x1A0A60E}, {0x40A60F, 0x40A60F},   {0x20A610, 0x20A61F},
    {0x380A620, 0x380A629}, {0x20A62A, 0x20A62B},   {0x20A640, 0x20A66D},   {0x20A66E, 0x20A66E},
    {0x100A66F, 0x100A66F}, {0x100A670, 0x100A672}, {0x20A673, 0x20A673},   {0x100A674, 0x100A67D},
    {0x20A67E, 0x20A67E},   {0x20A67F, 0x20A67F},   {0x20A680, 0x20A69B},   {0x20A69C, 0x20A69D},
    {0x100A69E, 0x100A69F}, {0x20A6A0, 0x20A6E5},   {0x20A6E6, 0x20A6EF},   {0x100A6F0, 0x100A6F1},
    {0x20A6F2, 0x20A6F2},   {0x40A6F3, 0x40A6F7},   {0x20A700, 0x20A716},   {0x20A717, 0x20A71F},
    {0x20A720, 0x20A721},   {0x20A722, 0x20A76F},   {0x20A770, 0x20A770},   {0x20A771, 0x20A787},
    {0x20A788, 0x20A788},   {0x20A789, 0x20A78A},   {0x20A78B, 0x20A78E},   {0x20A78F, 0x20A78F},
    {0x20A790, 0x20A7CA},   {0x20A7D0, 0x20A7D1},   {0x20A7D3, 0x20A7D3},   {0x20A7D5, 0x20A7D9},
    {0x20A7F2, 0x20A7F4},   {0x20A7F5, 0x20A7F6},   {0x20A7F7, 0x20A7F7},   {0x20A7F8, 0x20A7F9},
    {0x20A7FA, 0x20A7FA},   {0x20A7FB, 0x20A7FF},   {0x20A800, 0x20A801},   {0x100A802, 0x100A802},
    {0x20A803, 0x20A805},   {0x100A806, 0x100A806}, {0x20A807, 0x20A80A},   {0x100A80B, 0x100A80B},
    {0x20A80C, 0x20A822},   {0x100A823, 0x100A824}, {0x100A825, 0x100A826}, {0x100A827, 0x100A827},
    {0x20A828, 0x20A82B},   {0x100A82C, 0x100A82C}, {0x20A830, 0x20A835},   {0x20A836, 0x20A837},
    {0x3C0A838, 0x3C0A838}, {0x20A839, 0x20A839},   {0x20A840, 0x20A873},   {0x60A874, 0x60A875},
    {0x1A0A876, 0x1A0A877}, {0x100A880, 0x100A881}, {0x20A882, 0x20A8B3},   {0x100A8B4, 0x100A8C3},
    {0x100A8C4, 0x100A8C5}, {0x40A8CE, 0x40A8CF},   {0x380A8D0, 0x380A8D9}, {0x100A8E0, 0x100A8F1},
    {0x20A8F2, 0x20A8F7},   {0x20A8F8, 0x20A8FA},   {0x20A8FB, 0x20A8FB},   {0x60A8FC, 0x60A8FC},
    {0x20A8FD, 0x20A8FE},   {0x100A8FF, 0x100A8FF}, {0x380A900, 0x380A909}, {0x20A90A, 0x20A925},
    {0x100A926, 0x100A92D}, {0x40A92E, 0x40A92F},   {0x20A930, 0x20A946},   {0x100A947, 0x100A951},
    {0x100A952, 0x100A953}, {0x20A95F, 0x20A95F},   {0x2C0A960, 0x2C0A97C}, {0x100A980, 0x100A982},
    {0x100A983, 0x100A983}, {0x20A984, 0x20A9B2},   {0x100A9B3, 0x100A9B3}, {0x100A9B4, 0x100A9B5},
    {0x100A9B6, 0x100A9B9}, {0x100A9BA, 0x100A9BB}, {0x100A9BC, 0x100A9BD}, {0x100A9BE, 0x100A9C0},
    {0x20A9C1, 0x20A9C6},   {0x40A9C7, 0x40A9C9},   {0x20A9CA, 0x20A9CD},   {0x20A9CF, 0x20A9CF},
    {0x380A9D0, 0x380A9D9}, {0x20A9DE, 0x20A9DF},   {0x20A9E0, 0x20A9E4},   {0x100A9E5, 0x100A9E5},
    {0x20A9E6, 0x20A9E6},   {0x20A9E7, 0x20A9EF},   {0x380A9F0, 0x380A9F9}, {0x20A9FA, 0x20A9FE},
    {0x20AA00, 0x20AA28},   {0x100AA29, 0x100AA2E}, {0x100AA2F, 0x100AA30}, {0x100AA31, 0x100AA32},
    {0x100AA33, 0x100AA34}, {0x100AA35, 0x100AA36}, {0x20AA40, 0x20AA42},   {0x100AA43, 0x100AA43},
    {0x20AA44, 0x20AA4B},   {0x100AA4C, 0x100AA4C}, {0x100AA4D, 0x100AA4D}, {0x380AA50, 0x380AA59},
    {0x20AA5C, 0x20AA5C},   {0x40AA5D, 0x40AA5F},   {0x20AA60, 0x20AA6F},   {0x20AA70, 0x20AA70},
    {0x20AA71, 0x20AA76},   {0x20AA77, 0x20AA79},   {0x20AA7A, 0x20AA7A},   {0x100AA7B, 0x100AA7B},
    {0x100AA7C, 0x100AA7C}, {0x100AA7D, 0x100AA7D}, {0x20AA7E, 0x20AA7F},   {0x20AA80, 0x20AAAF},
    {0x100AAB0, 0x100AAB0}, {0x20AAB1, 0x20AAB1},   {0x100AAB2, 0x100AAB4}, {0x20AAB5, 0x20AAB6},
    {0x100AAB7, 0x100AAB8}, {0x20AAB9, 0x20AABD},   {0x100AABE, 0x100AABF}, {0x20AAC0, 0x20AAC0},
    {0x100AAC1, 0x100AAC1}, {0x20AAC2, 0x20AAC2},   {0x20AADB, 0x20AADC},   {0x20AADD, 0x20AADD},
    {0x20AADE, 0x20AADF},   {0x20AAE0, 0x20AAEA},   {0x100AAEB, 0x100AAEB}, {0x100AAEC, 0x100AAED},
    {0x100AAEE, 0x100AAEF}, {0x40AAF0, 0x40AAF1},   {0x20AAF2, 0x20AAF2},   {0x20AAF3, 0x20AAF4},
    {0x100AAF5, 0x100AAF5}, {0x100AAF6, 0x100AAF6}, {0x20AB01, 0x20AB06},   {0x20AB09, 0x20AB0E},
    {0x20AB11, 0x20AB16},   {0x20AB20, 0x20AB26},   {0x20AB28, 0x20AB2E},   {0x20AB30, 0x20AB5A},
    {0x20AB5B, 0x20AB5B},   {0x20AB5C, 0x20AB5F},   {0x20AB60, 0x20AB68},   {0x20AB69, 0x20AB69},
    {0x20AB6A, 0x20AB6B},   {0x20AB70, 0x20ABBF},   {0x20ABC0, 0x20ABE2},   {0x100ABE3, 0x100ABE4},
    {0x100ABE5, 0x100ABE5}, {0x100ABE6, 0x100ABE7}, {0x100ABE8, 0x100ABE8}, {0x100ABE9, 0x100ABEA},
    {0x40ABEB, 0x40ABEB},   {0x100ABEC, 0x100ABEC}, {0x100ABED, 0x100ABED}, {0x380ABF0, 0x380ABF9},
    {0x1E0AC00, 0x1E0AC00}, {0x200AC01, 0x200AC1B}, {0x1E0AC1C, 0x1E0AC1C}, {0x200AC1D, 0x200AC37},
    {0x1E0AC38, 0x1E0AC38}, {0x200AC39, 0x200AC53}, {0x1E0AC54, 0x1E0AC54}, {0x200AC55, 0x200AC6F},
    {0x1E0AC70, 0x1E0AC70}, {0x200AC71, 0x200AC8B}, {0x1E0AC8C, 0x1E0AC8C}, {0x200AC8D, 0x200ACA7},
    {0x1E0ACA8, 0x1E0ACA8}, {0x200ACA9, 0x200ACC3}, {0x1E0ACC4, 0x1E0ACC4}, {0x200ACC5, 0x200ACDF},
    {0x1E0ACE0, 0x1E0ACE0}, {0x200ACE1, 0x200ACFB}, {0x1E0ACFC, 0x1E0ACFC}, {0x200ACFD, 0x200AD17},
    {0x1E0AD18, 0x1E0AD18}, {0x200AD19, 0x200AD33}, {0x1E0AD34, 0x1E0AD34}, {0x200AD35, 0x200AD4F},
    {0x1E0AD50, 0x1E0AD50}, {0x200AD51, 0x200AD6B}, {0x1E0AD6C, 0x1E0AD6C}, {0x200AD6D, 0x200AD87},
    {0x1E0AD88, 0x1E0AD88}, {0x200AD89, 0x200ADA3}, {0x1E0ADA4, 0x1E0ADA4}, {0x200ADA5, 0x200ADBF},
    {0x1E0ADC0, 0x1E0ADC0}, {0x200ADC1, 0x200ADDB}, {0x1E0ADDC, 0x1E0ADDC}, {0x200ADDD, 0x200ADF7},
    {0x1E0ADF8, 0x1E0ADF8}, {0x200ADF9, 0x200AE13}, {0x1E0AE14, 0x1E0AE14}, {0x200AE15, 0x200AE2F},
    {0x1E0AE30, 0x1E0AE30}, {0x200AE31, 0x200AE4B}, {0x1E0AE4C, 0x1E0AE4C}, {0x200AE4D, 0x200AE67},
    {0x1E0AE68, 0x1E0AE68}, {0x200AE69, 0x200AE83}, {0x1E0AE84, 0x1E0AE84}, {0x200AE85, 0x200AE9F},
    {0x1E0AEA0, 0x1E0AEA0}, {0x200AEA1, 0x200AEBB}, {0x1E0AEBC, 0x1E0AEBC}, {0x200AEBD, 0x200AED7},
    {0x1E0AED8, 0x1E0AED8}, {0x200AED9, 0x200AEF3}, {0x1E0AEF4, 0x1E0AEF4}, {0x200AEF5, 0x200AF0F},
    {0x1E0AF10, 0x1E0AF10}, {0x200AF11, 0x200AF2B}, {0x1E0AF2C, 0x1E0AF2C}, {0x200AF2D, 0x200AF47},
    {0x1E0AF48, 0x1E0AF48}, {0x200AF49, 0x200AF63}, {0x1E0AF64, 0x1E0AF64}, {0x200AF65, 0x200AF7F},
    {0x1E0AF80, 0x1E0AF80}, {0x200AF81, 0x200AF9B}, {0x1E0AF9C, 0x1E0AF9C}, {0x200AF9D, 0x200AFB7},
    {0x1E0AFB8, 0x1E0AFB8}, {0x200AFB9, 0x200AFD3}, {0x1E0AFD4, 0x1E0AFD4}, {0x200AFD5, 0x200AFEF},
    {0x1E0AFF0, 0x1E0AFF0}, {0x200AFF1, 0x200B00B}, {0x1E0B00C, 0x1E0B00C}, {0x200B00D, 0x200B027},
    {0x1E0B028, 0x1E0B028}, {0x200B029, 0x200B043}, {0x1E0B044, 0x1E0B044}, {0x200B045, 0x200B05F},
    {0x1E0B060, 0x1E0B060}, {0x200B061, 0x200B07B}, {0x1E0B07C, 0x1E0B07C}, {0x200B07D, 0x200B097},
    {0x1E0B098, 0x1E0B098}, {0x200B099, 0x200B0B3}, {0x1E0B0B4, 0x1E0B0B4}, {0x200B0B5, 0x200B0CF},
    {0x1E0B0D0, 0x1E0B0D0}, {0x200B0D1, 0x200B0EB}, {0x1E0B0EC, 0x1E0B0EC}, {0x200B0ED, 0x200B107},
    {0x1E0B108, 0x1E0B108}, {0x200B109, 0x200B123}, {0x1E0B124, 0x1E0B124}, {0x200B125, 0x200B13F},
    {0x1E0B140, 0x1E0B140}, {0x200B141, 0x200B15B}, {0x1E0B15C, 0x1E0B15C}, {0x200B15D, 0x200B177},
    {0x1E0B178, 0x1E0B178}, {0x200B179, 0x200B193}, {0x1E0B194, 0x1E0B194}, {0x200B195, 0x200B1AF},
    {0x1E0B1B0, 0x1E0B1B0}, {0x200B1B1, 0x200B1CB}, {0x1E0B1CC, 0x1E0B1CC}, {0x200B1CD, 0x200B1E7},
    {0x1E0B1E8, 0x1E0B1E8}, {0x200B1E9, 0x200B203}, {0x1E0B204, 0x1E0B204}, {0x200B205, 0x200B21F},
    {0x1E0B220, 0x1E0B220}, {0x200B221, 0x200B23B}, {0x1E0B23C, 0x1E0B23C}, {0x200B23D, 0x200B257},
    {0x1E0B258, 0x1E0B258}, {0x200B259, 0x200B273}, {0x1E0B274, 0x1E0B274}, {0x200B275, 0x200B28F},
    {0x1E0B290, 0x1E0B290}, {0x200B291, 0x200B2AB}, {0x1E0B2AC, 0x1E0B2AC}, {0x200B2AD, 0x200B2C7},
    {0x1E0B2C8, 0x1E0B2C8}, {0x200B2C9, 0x200B2E3}, {0x1E0B2E4, 0x1E0B2E4}, {0x200B2E5, 0x200B2FF},
    {0x1E0B300, 0x1E0B300}, {0x200B301, 0x200B31B}, {0x1E0B31C, 0x1E0B31C}, {0x200B31D, 0x200B337},
    {0x1E0B338, 0x1E0B338}, {0x200B339, 0x200B353}, {0x1E0B354, 0x1E0B354}, {0x200B355, 0x200B36F},
    {0x1E0B370, 0x1E0B370}, {0x200B371, 0x200B38B}, {0x1E0B38C, 0x1E0B38C}, {0x200B38D, 0x200B3A7},
    {0x1E0B3A8, 0x1E0B3A8}, {0x200B3A9, 0x200B3C3}, {0x1E0B3C4, 0x1E0B3C4}, {0x200B3C5, 0x200B3DF},
    {0x1E0B3E0, 0x1E0B3E0}, {0x200B3E1, 0x200B3FB}, {0x1E0B3FC, 0x1E0B3FC}, {0x200B3FD, 0x200B417},
    {0x1E0B418, 0x1E0B418}, {0x200B419, 0x200B433}, {0x1E0B434, 0x1E0B434}, {0x200B435, 0x200B44F},
    {0x1E0B450, 0x1E0B450}, {0x200B451, 0x200B46B}, {0x1E0B46C, 0x1E0B46C}, {0x200B46D, 0x200B487},
    {0x1E0B488, 0x1E0B488}, {0x200B489, 0x200B4A3}, {0x1E0B4A4, 0x1E0B4A4}, {0x200B4A5, 0x200B4BF},
    {0x1E0B4C0, 0x1E0B4C0}, {0x200B4C1, 0x200B4DB}, {0x1E0B4DC, 0x1E0B4DC}, {0x200B4DD, 0x200B4F7},
    {0x1E0B4F8, 0x1E0B4F8}, {0x200B4F9, 0x200B513}, {0x1E0B514, 0x1E0B514}, {0x200B515, 0x200B52F},
    {0x1E0B530, 0x1E0B530}, {0x200B531, 0x200B54B}, {0x1E0B54C, 0x1E0B54C}, {0x200B54D, 0x200B567},
    {0x1E0B568, 0x1E0B568}, {0x200B569, 0x200B583}, {0x1E0B584, 0x1E0B584}, {0x200B585, 0x200B59F},
    {0x1E0B5A0, 0x1E0B5A0}, {0x200B5A1, 0x200B5BB}, {0x1E0B5BC, 0x1E0B5BC}, {0x200B5BD, 0x200B5D7},
    {0x1E0B5D8, 0x1E0B5D8}, {0x200B5D9, 0x200B5F3}, {0x1E0B5F4, 0x1E0B5F4}, {0x200B5F5, 0x200B60F},
    {0x1E0B610, 0x1E0B610}, {0x200B611, 0x200B62B}, {0x1E0B62C, 0x1E0B62C}, {0x200B62D, 0x200B647},
    {0x1E0B648, 0x1E0B648}, {0x200B649, 0x200B663}, {0x1E0B664, 0x1E0B664}, {0x200B665, 0x200B67F},
    {0x1E0B680, 0x1E0B680}, {0x200B681, 0x200B69B}, {0x1E0B69C, 0x1E0B69C}, {0x200B69D, 0x200B6B7},
    {0x1E0B6B8, 0x1E0B6B8}, {0x200B6B9, 0x200B6D3}, {0x1E0B6D4, 0x1E0B6D4}, {0x200B6D5, 0x200B6EF},
    {0x1E0B6F0, 0x1E0B6F0}, {0x200B6F1, 0x200B70B}, {0x1E0B70C, 0x1E0B70C}, {0x200B70D, 0x200B727},
    {0x1E0B728, 0x1E0B728}, {0x200B729, 0x200B743}, {0x1E0B744, 0x1E0B744}, {0x200B745, 0x200B75F},
    {0x1E0B760, 0x1E0B760}, {0x200B761, 0x200B77B}, {0x1E0B77C, 0x1E0B77C}, {0x200B77D, 0x200B797},
    {0x1E0B798, 0x1E0B798}, {0x200B799, 0x200B7B3}, {0x1E0B7B4, 0x1E0B7B4}, {0x200B7B5, 0x200B7CF},
    {0x1E0B7D0, 0x1E0B7D0}, {0x200B7D1, 0x200B7EB}, {0x1E0B7EC, 0x1E0B7EC}, {0x200B7ED, 0x200B807},
    {0x1E0B808, 0x1E0B808}, {0x200B809, 0x200B823}, {0x1E0B824, 0x1E0B824}, {0x200B825, 0x200B83F},
    {0x1E0B840, 0x1E0B840}, {0x200B841, 0x200B85B}, {0x1E0B85C, 0x1E0B85C}, {0x200B85D, 0x200B877},
    {0x1E0B878, 0x1E0B878}, {0x200B879, 0x200B893}, {0x1E0B894, 0x1E0B894}, {0x200B895, 0x200B8AF},
    {0x1E0B8B0, 0x1E0B8B0}, {0x200B8B1, 0x200B8CB}, {0x1E0B8CC, 0x1E0B8CC}, {0x200B8CD, 0x200B8E7},
    {0x1E0B8E8, 0x1E0B8E8}, {0x200B8E9, 0x200B903}, {0x1E0B904, 0x1E0B904}, {0x200B905, 0x200B91F},
    {0x1E0B920, 0x1E0B920}, {0x200B921, 0x200B93B}, {0x1E0B93C, 0x1E0B93C}, {0x200B93D, 0x200B957},
    {0x1E0B958, 0x1E0B958}, {0x200B959, 0x200B973}, {0x1E0B974, 0x1E0B974}, {0x200B975, 0x200B98F},
    {0x1E0B990, 0x1E0B990}, {0x200B991, 0x200B9AB}, {0x1E0B9AC, 0x1E0B9AC}, {0x200B9AD, 0x200B9C7},
    {0x1E0B9C8, 0x1E0B9C8}, {0x200B9C9, 0x200B9E3}, {0x1E0B9E4, 0x1E0B9E4}, {0x200B9E5, 0x200B9FF},
    {0x1E0BA00, 0x1E0BA00}, {0x200BA01, 0x200BA1B}, {0x1E0BA1C, 0x1E0BA1C}, {0x200BA1D, 0x200BA37},
    {0x1E0BA38, 0x1E0BA38}, {0x200BA39, 0x200BA53}, {0x1E0BA54, 0x1E0BA54}, {0x200BA55, 0x200BA6F},
    {0x1E0BA70, 0x1E0BA70}, {0x200BA71, 0x200BA8B}, {0x1E0BA8C, 0x1E0BA8C}, {0x200BA8D, 0x200BAA7},
    {0x1E0BAA8, 0x1E0BAA8}, {0x200BAA9, 0x200BAC3}, {0x1E0BAC4, 0x1E0BAC4}, {0x200BAC5, 0x200BADF},
    {0x1E0BAE0, 0x1E0BAE0}, {0x200BAE1, 0x200BAFB}, {0x1E0BAFC, 0x1E0BAFC}, {0x200BAFD, 0x200BB17},
    {0x1E0BB18, 0x1E0BB18}, {0x200BB19, 0x200BB33}, {0x1E0BB34, 0x1E0BB34}, {0x200BB35, 0x200BB4F},
    {0x1E0BB50, 0x1E0BB50}, {0x200BB51, 0x200BB6B}, {0x1E0BB6C, 0x1E0BB6C}, {0x200BB6D, 0x200BB87},
    {0x1E0BB88, 0x1E0BB88}, {0x200BB89, 0x200BBA3}, {0x1E0BBA4, 0x1E0BBA4}, {0x200BBA5, 0x200BBBF},
    {0x1E0BBC0, 0x1E0BBC0}, {0x200BBC1, 0x200BBDB}, {0x1E0BBDC, 0x1E0BBDC}, {0x200BBDD, 0x200BBF7},
    {0x1E0BBF8, 0x1E0BBF8}, {0x200BBF9, 0x200BC13}, {0x1E0BC14, 0x1E0BC14}, {0x200BC15, 0x200BC2F},
    {0x1E0BC30, 0x1E0BC30}, {0x200BC31, 0x200BC4B}, {0x1E0BC4C, 0x1E0BC4C}, {0x200BC4D, 0x200BC67},
    {0x1E0BC68, 0x1E0BC68}, {0x200BC69, 0x200BC83}, {0x1E0BC84, 0x1E0BC84}, {0x200BC85, 0x200BC9F},
    {0x1E0BCA0, 0x1E0BCA0}, {0x200BCA1, 0x200BCBB}, {0x1E0BCBC, 0x1E0BCBC}, {0x200BCBD, 0x200BCD7},
    {0x1E0BCD8, 0x1E0BCD8}, {0x200BCD9, 0x200BCF3}, {0x1E0BCF4, 0x1E0BCF4}, {0x200BCF5, 0x200BD0F},
    {0x1E0BD10, 0x1E0BD10}, {0x200BD11, 0x200BD2B}, {0x1E0BD2C, 0x1E0BD2C}, {0x200BD2D, 0x200BD47},
    {0x1E0BD48, 0x1E0BD48}, {0x200BD49, 0x200BD63}, {0x1E0BD64, 0x1E0BD64}, {0x200BD65, 0x200BD7F},
    {0x1E0BD80, 0x1E0BD80}, {0x200BD81, 0x200BD9B}, {0x1E0BD9C, 0x1E0BD9C}, {0x200BD9D, 0x200BDB7},
    {0x1E0BDB8, 0x1E0BDB8}, {0x200BDB9, 0x200BDD3}, {0x1E0BDD4, 0x1E0BDD4}, {0x200BDD5, 0x200BDEF},
    {0x1E0BDF0, 0x1E0BDF0}, {0x200BDF1, 0x200BE0B}, {0x1E0BE0C, 0x1E0BE0C}, {0x200BE0D, 0x200BE27},
    {0x1E0BE28, 0x1E0BE28}, {0x200BE29, 0x200BE43}, {0x1E0BE44, 0x1E0BE44}, {0x200BE45, 0x200BE5F},
    {0x1E0BE60, 0x1E0BE60}, {0x200BE61, 0x200BE7B}, {0x1E0BE7C, 0x1E0BE7C}, {0x200BE7D, 0x200BE97},
    {0x1E0BE98, 0x1E0BE98}, {0x200BE99, 0x200BEB3}, {0x1E0BEB4, 0x1E0BEB4}, {0x200BEB5, 0x200BECF},
    {0x1E0BED0, 0x1E0BED0}, {0x200BED1, 0x200BEEB}, {0x1E0BEEC, 0x1E0BEEC}, {0x200BEED, 0x200BF07},
    {0x1E0BF08, 0x1E0BF08}, {0x200BF09, 0x200BF23}, {0x1E0BF24, 0x1E0BF24}, {0x200BF25, 0x200BF3F},
    {0x1E0BF40, 0x1E0BF40}, {0x200BF41, 0x200BF5B}, {0x1E0BF5C, 0x1E0BF5C}, {0x200BF5D, 0x200BF77},
    {0x1E0BF78, 0x1E0BF78}, {0x200BF79, 0x200BF93}, {0x1E0BF94, 0x1E0BF94}, {0x200BF95, 0x200BFAF},
    {0x1E0BFB0, 0x1E0BFB0}, {0x200BFB1, 0x200BFCB}, {0x1E0BFCC, 0x1E0BFCC}, {0x200BFCD, 0x200BFE7},
    {0x1E0BFE8, 0x1E0BFE8}, {0x200BFE9, 0x200C003}, {0x1E0C004, 0x1E0C004}, {0x200C005, 0x200C01F},
    {0x1E0C020, 0x1E0C020}, {0x200C021, 0x200C03B}, {0x1E0C03C, 0x1E0C03C}, {0x200C03D, 0x200C057},
    {0x1E0C058, 0x1E0C058}, {0x200C059, 0x200C073}, {0x1E0C074, 0x1E0C074}, {0x200C075, 0x200C08F},
    {0x1E0C090, 0x1E0C090}, {0x200C091, 0x200C0AB}, {0x1E0C0AC, 0x1E0C0AC}, {0x200C0AD, 0x200C0C7},
    {0x1E0C0C8, 0x1E0C0C8}, {0x200C0C9, 0x200C0E3}, {0x1E0C0E4, 0x1E0C0E4}, {0x200C0E5, 0x200C0FF},
    {0x1E0C100, 0x1E0C100}, {0x200C101, 0x200C11B}, {0x1E0C11C, 0x1E0C11C}, {0x200C11D, 0x200C137},
    {0x1E0C138, 0x1E0C138}, {0x200C139, 0x200C153}, {0x1E0C154, 0x1E0C154}, {0x200C155, 0x200C16F},
    {0x1E0C170, 0x1E0C170}, {0x200C171, 0x200C18B}, {0x1E0C18C, 0x1E0C18C}, {0x200C18D, 0x200C1A7},
    {0x1E0C1A8, 0x1E0C1A8}, {0x200C1A9, 0x200C1C3}, {0x1E0C1C4, 0x1E0C1C4}, {0x200C1C5, 0x200C1DF},
    {0x1E0C1E0, 0x1E0C1E0}, {0x200C1E1, 0x200C1FB}, {0x1E0C1FC, 0x1E0C1FC}, {0x200C1FD, 0x200C217},
    {0x1E0C218, 0x1E0C218}, {0x200C219, 0x200C233}, {0x1E0C234, 0x1E0C234}, {0x200C235, 0x200C24F},
    {0x1E0C250, 0x1E0C250}, {0x200C251, 0x200C26B}, {0x1E0C26C, 0x1E0C26C}, {0x200C26D, 0x200C287},
    {0x1E0C288, 0x1E0C288}, {0x200C289, 0x200C2A3}, {0x1E0C2A4, 0x1E0C2A4}, {0x200C2A5, 0x200C2BF},
    {0x1E0C2C0, 0x1E0C2C0}, {0x200C2C1, 0x200C2DB}, {0x1E0C2DC, 0x1E0C2DC}, {0x200C2DD, 0x200C2F7},
    {0x1E0C2F8, 0x1E0C2F8}, {0x200C2F9, 0x200C313}, {0x1E0C314, 0x1E0C314}, {0x200C315, 0x200C32F},
    {0x1E0C330, 0x1E0C330}, {0x200C331, 0x200C34B}, {0x1E0C34C, 0x1E0C34C}, {0x200C34D, 0x200C367},
    {0x1E0C368, 0x1E0C368}, {0x200C369, 0x200C383}, {0x1E0C384, 0x1E0C384}, {0x200C385, 0x200C39F},
    {0x1E0C3A0, 0x1E0C3A0}, {0x200C3A1, 0x200C3BB}, {0x1E0C3BC, 0x1E0C3BC}, {0x200C3BD, 0x200C3D7},
    {0x1E0C3D8, 0x1E0C3D8}, {0x200C3D9, 0x200C3F3}, {0x1E0C3F4, 0x1E0C3F4}, {0x200C3F5, 0x200C40F},
    {0x1E0C410, 0x1E0C410}, {0x200C411, 0x200C42B}, {0x1E0C42C, 0x1E0C42C}, {0x200C42D, 0x200C447},
    {0x1E0C448, 0x1E0C448}, {0x200C449, 0x200C463}, {0x1E0C464, 0x1E0C464}, {0x200C465, 0x200C47F},
    {0x1E0C480, 0x1E0C480}, {0x200C481, 0x200C49B}, {0x1E0C49C, 0x1E0C49C}, {0x200C49D, 0x200C4B7},
    {0x1E0C4B8, 0x1E0C4B8}, {0x200C4B9, 0x200C4D3}, {0x1E0C4D4, 0x1E0C4D4}, {0x200C4D5, 0x200C4EF},
    {0x1E0C4F0, 0x1E0C4F0}, {0x200C4F1, 0x200C50B}, {0x1E0C50C, 0x1E0C50C}, {0x200C50D, 0x200C527},
    {0x1E0C528, 0x1E0C528}, {0x200C529, 0x200C543}, {0x1E0C544, 0x1E0C544}, {0x200C545, 0x200C55F},
    {0x1E0C560, 0x1E0C560}, {0x200C561, 0x200C57B}, {0x1E0C57C, 0x1E0C57C}, {0x200C57D, 0x200C597},
    {0x1E0C598, 0x1E0C598}, {0x200C599, 0x200C5B3}, {0x1E0C5B4, 0x1E0C5B4}, {0x200C5B5, 0x200C5CF},
    {0x1E0C5D0, 0x1E0C5D0}, {0x200C5D1, 0x200C5EB}, {0x1E0C5EC, 0x1E0C5EC}, {0x200C5ED, 0x200C607},
    {0x1E0C608, 0x1E0C608}, {0x200C609, 0x200C623}, {0x1E0C624, 0x1E0C624}, {0x200C625, 0x200C63F},
    {0x1E0C640, 0x1E0C640}, {0x200C641, 0x200C65B}, {0x1E0C65C, 0x1E0C65C}, {0x200C65D, 0x200C677},
    {0x1E0C678, 0x1E0C678}, {0x200C679, 0x200C693}, {0x1E0C694, 0x1E0C694}, {0x200C695, 0x200C6AF},
    {0x1E0C6B0, 0x1E0C6B0}, {0x200C6B1, 0x200C6CB}, {0x1E0C6CC, 0x1E0C6CC}, {0x200C6CD, 0x200C6E7},
    {0x1E0C6E8, 0x1E0C6E8}, {0x200C6E9, 0x200C703}, {0x1E0C704, 0x1E0C704}, {0x200C705, 0x200C71F},
    {0x1E0C720, 0x1E0C720}, {0x200C721, 0x200C73B}, {0x1E0C73C, 0x1E0C73C}, {0x200C73D, 0x200C757},
    {0x1E0C758, 0x1E0C758}, {0x200C759, 0x200C773}, {0x1E0C774, 0x1E0C774}, {0x200C775, 0x200C78F},
    {0x1E0C790, 0x1E0C790}, {0x200C791, 0x200C7AB}, {0x1E0C7AC, 0x1E0C7AC}, {0x200C7AD, 0x200C7C7},
    {0x1E0C7C8, 0x1E0C7C8}, {0x200C7C9, 0x200C7E3}, {0x1E0C7E4, 0x1E0C7E4}, {0x200C7E5, 0x200C7FF},
    {0x1E0C800, 0x1E0C800}, {0x200C801, 0x200C81B}, {0x1E0C81C, 0x1E0C81C}, {0x200C81D, 0x200C837},
    {0x1E0C838, 0x1E0C838}, {0x200C839, 0x200C853}, {0x1E0C854, 0x1E0C854}, {0x200C855, 0x200C86F},
    {0x1E0C870, 0x1E0C870}, {0x200C871, 0x200C88B}, {0x1E0C88C, 0x1E0C88C}, {0x200C88D, 0x200C8A7},
    {0x1E0C8A8, 0x1E0C8A8}, {0x200C8A9, 0x200C8C3}, {0x1E0C8C4, 0x1E0C8C4}, {0x200C8C5, 0x200C8DF},
    {0x1E0C8E0, 0x1E0C8E0}, {0x200C8E1, 0x200C8FB}, {0x1E0C8FC, 0x1E0C8FC}, {0x200C8FD, 0x200C917},
    {0x1E0C918, 0x1E0C918}, {0x200C919, 0x200C933}, {0x1E0C934, 0x1E0C934}, {0x200C935, 0x200C94F},
    {0x1E0C950, 0x1E0C950}, {0x200C951, 0x200C96B}, {0x1E0C96C, 0x1E0C96C}, {0x200C96D, 0x200C987},
    {0x1E0C988, 0x1E0C988}, {0x200C989, 0x200C9A3}, {0x1E0C9A4, 0x1E0C9A4}, {0x200C9A5, 0x200C9BF},
    {0x1E0C9C0, 0x1E0C9C0}, {0x200C9C1, 0x200C9DB}, {0x1E0C9DC, 0x1E0C9DC}, {0x200C9DD, 0x200C9F7},
    {0x1E0C9F8, 0x1E0C9F8}, {0x200C9F9, 0x200CA13}, {0x1E0CA14, 0x1E0CA14}, {0x200CA15, 0x200CA2F},
    {0x1E0CA30, 0x1E0CA30}, {0x200CA31, 0x200CA4B}, {0x1E0CA4C, 0x1E0CA4C}, {0x200CA4D, 0x200CA67},
    {0x1E0CA68, 0x1E0CA68}, {0x200CA69, 0x200CA83}, {0x1E0CA84, 0x1E0CA84}, {0x200CA85, 0x200CA9F},
    {0x1E0CAA0, 0x1E0CAA0}, {0x200CAA1, 0x200CABB}, {0x1E0CABC, 0x1E0CABC}, {0x200CABD, 0x200CAD7},
    {0x1E0CAD8, 0x1E0CAD8}, {0x200CAD9, 0x200CAF3}, {0x1E0CAF4, 0x1E0CAF4}, {0x200CAF5, 0x200CB0F},
    {0x1E0CB10, 0x1E0CB10}, {0x200CB11, 0x200CB2B}, {0x1E0CB2C, 0x1E0CB2C}, {0x200CB2D, 0x200CB47},
    {0x1E0CB48, 0x1E0CB48}, {0x200CB49, 0x200CB63}, {0x1E0CB64, 0x1E0CB64}, {0x200CB65, 0x200CB7F},
    {0x1E0CB80, 0x1E0CB80}, {0x200CB81, 0x200CB9B}, {0x1E0CB9C, 0x1E0CB9C}, {0x200CB9D, 0x200CBB7},
    {0x1E0CBB8, 0x1E0CBB8}, {0x200CBB9, 0x200CBD3}, {0x1E0CBD4, 0x1E0CBD4}, {0x200CBD5, 0x200CBEF},
    {0x1E0CBF0, 0x1E0CBF0}, {0x200CBF1, 0x200CC0B}, {0x1E0CC0C, 0x1E0CC0C}, {0x200CC0D, 0x200CC27},
    {0x1E0CC28, 0x1E0CC28}, {0x200CC29, 0x200CC43}, {0x1E0CC44, 0x1E0CC44}, {0x200CC45, 0x200CC5F},
    {0x1E0CC60, 0x1E0CC60}, {0x200CC61, 0x200CC7B}, {0x1E0CC7C, 0x1E0CC7C}, {0x200CC7D, 0x200CC97},
    {0x1E0CC98, 0x1E0CC98}, {0x200CC99, 0x200CCB3}, {0x1E0CCB4, 0x1E0CCB4}, {0x200CCB5, 0x200CCCF},
    {0x1E0CCD0, 0x1E0CCD0}, {0x200CCD1, 0x200CCEB}, {0x1E0CCEC, 0x1E0CCEC}, {0x200CCED, 0x200CD07},
    {0x1E0CD08, 0x1E0CD08}, {0x200CD09, 0x200CD23}, {0x1E0CD24, 0x1E0CD24}, {0x200CD25, 0x200CD3F},
    {0x1E0CD40, 0x1E0CD40}, {0x200CD41, 0x200CD5B}, {0x1E0CD5C, 0x1E0CD5C}, {0x200CD5D, 0x200CD77},
    {0x1E0CD78, 0x1E0CD78}, {0x200CD79, 0x200CD93}, {0x1E0CD94, 0x1E0CD94}, {0x200CD95, 0x200CDAF},
    {0x1E0CDB0, 0x1E0CDB0}, {0x200CDB1, 0x200CDCB}, {0x1E0CDCC, 0x1E0CDCC}, {0x200CDCD, 0x200CDE7},
    {0x1E0CDE8, 0x1E0CDE8}, {0x200CDE9, 0x200CE03}, {0x1E0CE04, 0x1E0CE04}, {0x200CE05, 0x200CE1F},
    {0x1E0CE20, 0x1E0CE20}, {0x200CE21, 0x200CE3B}, {0x1E0CE3C, 0x1E0CE3C}, {0x200CE3D, 0x200CE57},
    {0x1E0CE58, 0x1E0CE58}, {0x200CE59, 0x200CE73}, {0x1E0CE74, 0x1E0CE74}, {0x200CE75, 0x200CE8F},
    {0x1E0CE90, 0x1E0CE90}, {0x200CE91, 0x200CEAB}, {0x1E0CEAC, 0x1E0CEAC}, {0x200CEAD, 0x200CEC7},
    {0x1E0CEC8, 0x1E0CEC8}, {0x200CEC9, 0x200CEE3}, {0x1E0CEE4, 0x1E0CEE4}, {0x200CEE5, 0x200CEFF},
    {0x1E0CF00, 0x1E0CF00}, {0x200CF01, 0x200CF1B}, {0x1E0CF1C, 0x1E0CF1C}, {0x200CF1D, 0x200CF37},
    {0x1E0CF38, 0x1E0CF38}, {0x200CF39, 0x200CF53}, {0x1E0CF54, 0x1E0CF54}, {0x200CF55, 0x200CF6F},
    {0x1E0CF70, 0x1E0CF70}, {0x200CF71, 0x200CF8B}, {0x1E0CF8C, 0x1E0CF8C}, {0x200CF8D, 0x200CFA7},
    {0x1E0CFA8, 0x1E0CFA8}, {0x200CFA9, 0x200CFC3}, {0x1E0CFC4, 0x1E0CFC4}, {0x200CFC5, 0x200CFDF},
    {0x1E0CFE0, 0x1E0CFE0}, {0x200CFE1, 0x200CFFB}, {0x1E0CFFC, 0x1E0CFFC}, {0x200CFFD, 0x200D017},
    {0x1E0D018, 0x1E0D018}, {0x200D019, 0x200D033}, {0x1E0D034, 0x1E0D034}, {0x200D035, 0x200D04F},
    {0x1E0D050, 0x1E0D050}, {0x200D051, 0x200D06B}, {0x1E0D06C, 0x1E0D06C}, {0x200D06D, 0x200D087},
    {0x1E0D088, 0x1E0D088}, {0x200D089, 0x200D0A3}, {0x1E0D0A4, 0x1E0D0A4}, {0x200D0A5, 0x200D0BF},
    {0x1E0D0C0, 0x1E0D0C0}, {0x200D0C1, 0x200D0DB}, {0x1E0D0DC, 0x1E0D0DC}, {0x200D0DD, 0x200D0F7},
    {0x1E0D0F8, 0x1E0D0F8}, {0x200D0F9, 0x200D113}, {0x1E0D114, 0x1E0D114}, {0x200D115, 0x200D12F},
    {0x1E0D130, 0x1E0D130}, {0x200D131, 0x200D14B}, {0x1E0D14C, 0x1E0D14C}, {0x200D14D, 0x200D167},
    {0x1E0D168, 0x1E0D168}, {0x200D169, 0x200D183}, {0x1E0D184, 0x1E0D184}, {0x200D185, 0x200D19F},
    {0x1E0D1A0, 0x1E0D1A0}, {0x200D1A1, 0x200D1BB}, {0x1E0D1BC, 0x1E0D1BC}, {0x200D1BD, 0x200D1D7},
    {0x1E0D1D8, 0x1E0D1D8}, {0x200D1D9, 0x200D1F3}, {0x1E0D1F4, 0x1E0D1F4}, {0x200D1F5, 0x200D20F},
    {0x1E0D210, 0x1E0D210}, {0x200D211, 0x200D22B}, {0x1E0D22C, 0x1E0D22C}, {0x200D22D, 0x200D247},
    {0x1E0D248, 0x1E0D248}, {0x200D249, 0x200D263}, {0x1E0D264, 0x1E0D264}, {0x200D265, 0x200D27F},
    {0x1E0D280, 0x1E0D280}, {0x200D281, 0x200D29B}, {0x1E0D29C, 0x1E0D29C}, {0x200D29D, 0x200D2B7},
    {0x1E0D2B8, 0x1E0D2B8}, {0x200D2B9, 0x200D2D3}, {0x1E0D2D4, 0x1E0D2D4}, {0x200D2D5, 0x200D2EF},
    {0x1E0D2F0, 0x1E0D2F0}, {0x200D2F1, 0x200D30B}, {0x1E0D30C, 0x1E0D30C}, {0x200D30D, 0x200D327},
    {0x1E0D328, 0x1E0D328}, {0x200D329, 0x200D343}, {0x1E0D344, 0x1E0D344}, {0x200D345, 0x200D35F},
    {0x1E0D360, 0x1E0D360}, {0x200D361, 0x200D37B}, {0x1E0D37C, 0x1E0D37C}, {0x200D37D, 0x200D397},
    {0x1E0D398, 0x1E0D398}, {0x200D399, 0x200D3B3}, {0x1E0D3B4, 0x1E0D3B4}, {0x200D3B5, 0x200D3CF},
    {0x1E0D3D0, 0x1E0D3D0}, {0x200D3D1, 0x200D3EB}, {0x1E0D3EC, 0x1E0D3EC}, {0x200D3ED, 0x200D407},
    {0x1E0D408, 0x1E0D408}, {0x200D409, 0x200D423}, {0x1E0D424, 0x1E0D424}, {0x200D425, 0x200D43F},
    {0x1E0D440, 0x1E0D440}, {0x200D441, 0x200D45B}, {0x1E0D45C, 0x1E0D45C}, {0x200D45D, 0x200D477},
    {0x1E0D478, 0x1E0D478}, {0x200D479, 0x200D493}, {0x1E0D494, 0x1E0D494}, {0x200D495, 0x200D4AF},
    {0x1E0D4B0, 0x1E0D4B0}, {0x200D4B1, 0x200D4CB}, {0x1E0D4CC, 0x1E0D4CC}, {0x200D4CD, 0x200D4E7},
    {0x1E0D4E8, 0x1E0D4E8}, {0x200D4E9, 0x200D503}, {0x1E0D504, 0x1E0D504}, {0x200D505, 0x200D51F},
    {0x1E0D520, 0x1E0D520}, {0x200D521, 0x200D53B}, {0x1E0D53C, 0x1E0D53C}, {0x200D53D, 0x200D557},
    {0x1E0D558, 0x1E0D558}, {0x200D559, 0x200D573}, {0x1E0D574, 0x1E0D574}, {0x200D575, 0x200D58F},
    {0x1E0D590, 0x1E0D590}, {0x200D591, 0x200D5AB}, {0x1E0D5AC, 0x1E0D5AC}, {0x200D5AD, 0x200D5C7},
    {0x1E0D5C8, 0x1E0D5C8}, {0x200D5C9, 0x200D5E3}, {0x1E0D5E4, 0x1E0D5E4}, {0x200D5E5, 0x200D5FF},
    {0x1E0D600, 0x1E0D600}, {0x200D601, 0x200D61B}, {0x1E0D61C, 0x1E0D61C}, {0x200D61D, 0x200D637},
    {0x1E0D638, 0x1E0D638}, {0x200D639, 0x200D653}, {0x1E0D654, 0x1E0D654}, {0x200D655, 0x200D66F},
    {0x1E0D670, 0x1E0D670}, {0x200D671, 0x200D68B}, {0x1E0D68C, 0x1E0D68C}, {0x200D68D, 0x200D6A7},
    {0x1E0D6A8, 0x1E0D6A8}, {0x200D6A9, 0x200D6C3}, {0x1E0D6C4, 0x1E0D6C4}, {0x200D6C5, 0x200D6DF},
    {0x1E0D6E0, 0x1E0D6E0}, {0x200D6E1, 0x200D6FB}, {0x1E0D6FC, 0x1E0D6FC}, {0x200D6FD, 0x200D717},
    {0x1E0D718, 0x1E0D718}, {0x200D719, 0x200D733}, {0x1E0D734, 0x1E0D734}, {0x200D735, 0x200D74F},
    {0x1E0D750, 0x1E0D750}, {0x200D751, 0x200D76B}, {0x1E0D76C, 0x1E0D76C}, {0x200D76D, 0x200D787},
    {0x1E0D788, 0x1E0D788}, {0x200D789, 0x200D7A3}, {0x300D7B0, 0x300D7C6}, {0x2E0D7CB, 0x2E0D7FB},
    {0x20D800, 0x20DB7F},   {0x20DB80, 0x20DBFF},   {0x20DC00, 0x20DFFF},   {0x20E000, 0x20F8FF},
    {0x240F900, 0x240FA6D}, {0x240FA6E, 0x240FA6F}, {0x240FA70, 0x240FAD9}, {0x240FADA, 0x240FAFF},
    {0x20FB00, 0x20FB06},   {0x20FB13, 0x20FB17},   {0x260FB1D, 0x260FB1D}, {0x100FB1E, 0x100FB1E},
    {0x260FB1F, 0x260FB28}, {0x20FB29, 0x20FB29},   {0x260FB2A, 0x260FB36}, {0x260FB38, 0x260FB3C},
    {0x260FB3E, 0x260FB3E}, {0x260FB40, 0x260FB41}, {0x260FB43, 0x260FB44}, {0x260FB46, 0x260FB4F},
    {0x20FB50, 0x20FBB1},   {0x20FBB2, 0x20FBC2},   {0x20FBD3, 0x20FD3D},   {0xE0FD3E, 0xE0FD3E},
    {0x3A0FD3F, 0x3A0FD3F}, {0x20FD40, 0x20FD4F},   {0x20FD50, 0x20FD8F},   {0x20FD92, 0x20FDC7},
    {0x20FDCF, 0x20FDCF},   {0x20FDF0, 0x20FDFB},   {0x3C0FDFC, 0x3C0FDFC}, {0x20FDFD, 0x20FDFF},
    {0x100FE00, 0x100FE0F}, {0x2A0FE10, 0x2A0FE10}, {0xE0FE11, 0xE0FE12},   {0x2A0FE13, 0x2A0FE14},
    {0x1A0FE15, 0x1A0FE16}, {0x3A0FE17, 0x3A0FE17}, {0xE0FE18, 0xE0FE18},   {0x280FE19, 0x280FE19},
    {0x100FE20, 0x100FE2F}, {0x240FE30, 0x240FE30}, {0x240FE31, 0x240FE32}, {0x240FE33, 0x240FE34},
    {0x3A0FE35, 0x3A0FE35}, {0xE0FE36, 0xE0FE36},   {0x3A0FE37, 0x3A0FE37}, {0xE0FE38, 0xE0FE38},
    {0x3A0FE39, 0x3A0FE39}, {0xE0FE3A, 0xE0FE3A},   {0x3A0FE3B, 0x3A0FE3B}, {0xE0FE3C, 0xE0FE3C},
    {0x3A0FE3D, 0x3A0FE3D}, {0xE0FE3E, 0xE0FE3E},   {0x3A0FE3F, 0x3A0FE3F}, {0xE0FE40, 0xE0FE40},
    {0x3A0FE41, 0x3A0FE41}, {0xE0FE42, 0xE0FE42},   {0x3A0FE43, 0x3A0FE43}, {0xE0FE44, 0xE0FE44},
    {0x240FE45, 0x240FE46}, {0x3A0FE47, 0x3A0FE47}, {0xE0FE48, 0xE0FE48},   {0x240FE49, 0x240FE4C},
    {0x240FE4D, 0x240FE4F}, {0xE0FE50, 0xE0FE50},   {0x240FE51, 0x240FE51}, {0xE0FE52, 0xE0FE52},
    {0x360FE54, 0x360FE55}, {0x1A0FE56, 0x1A0FE57}, {0x240FE58, 0x240FE58}, {0x3A0FE59, 0x3A0FE59},
    {0xE0FE5A, 0xE0FE5A},   {0x3A0FE5B, 0x3A0FE5B}, {0xE0FE5C, 0xE0FE5C},   {0x3A0FE5D, 0x3A0FE5D},
    {0xE0FE5E, 0xE0FE5E},   {0x240FE5F, 0x240FE61}, {0x240FE62, 0x240FE62}, {0x240FE63, 0x240FE63},
    {0x240FE64, 0x240FE66}, {0x240FE68, 0x240FE68}, {0x3E0FE69, 0x3E0FE69}, {0x3C0FE6A, 0x3C0FE6A},
    {0x240FE6B, 0x240FE6B}, {0x20FE70, 0x20FE74},   {0x20FE76, 0x20FEFC},   {0x480FEFF, 0x480FEFF},
    {0x1A0FF01, 0x1A0FF01}, {0x240FF02, 0x240FF03}, {0x3E0FF04, 0x3E0FF04}, {0x3C0FF05, 0x3C0FF05},
    {0x240FF06, 0x240FF07}, {0x3A0FF08, 0x3A0FF08}, {0xE0FF09, 0xE0FF09},   {0x240FF0A, 0x240FF0A},
    {0x240FF0B, 0x240FF0B}, {0xE0FF0C, 0xE0FF0C},   {0x240FF0D, 0x240FF0D}, {0xE0FF0E, 0xE0FF0E},
    {0x240FF0F, 0x240FF0F}, {0x240FF10, 0x240FF19}, {0x360FF1A, 0x360FF1B}, {0x240FF1C, 0x240FF1E},
    {0x1A0FF1F, 0x1A0FF1F}, {0x240FF20, 0x240FF20}, {0x240FF21, 0x240FF3A}, {0x3A0FF3B, 0x3A0FF3B},
    {0x240FF3C, 0x240FF3C}, {0xE0FF3D, 0xE0FF3D},   {0x240FF3E, 0x240FF3E}, {0x240FF3F, 0x240FF3F},
    {0x240FF40, 0x240FF40}, {0x240FF41, 0x240FF5A}, {0x3A0FF5B, 0x3A0FF5B}, {0x240FF5C, 0x240FF5C},
    {0xE0FF5D, 0xE0FF5D},   {0x240FF5E, 0x240FF5E}, {0x3A0FF5F, 0x3A0FF5F}, {0xE0FF60, 0xE0FF60},
    {0xE0FF61, 0xE0FF61},   {0x3A0FF62, 0x3A0FF62}, {0xE0FF63, 0xE0FF63},   {0xE0FF64, 0xE0FF64},
    {0x360FF65, 0x360FF65}, {0x240FF66, 0x240FF66}, {0x360FF67, 0x360FF6F}, {0x360FF70, 0x360FF70},
    {0x240FF71, 0x240FF9D}, {0x360FF9E, 0x360FF9F}, {0x240FFA0, 0x240FFBE}, {0x240FFC2, 0x240FFC7},
    {0x240FFCA, 0x240FFCF}, {0x240FFD2, 0x240FFD7}, {0x240FFDA, 0x240FFDC}, {0x3C0FFE0, 0x3C0FFE0},
    {0x3E0FFE1, 0x3E0FFE1}, {0x240FFE2, 0x240FFE2}, {0x240FFE3, 0x240FFE3}, {0x240FFE4, 0x240FFE4},
    {0x3E0FFE5, 0x3E0FFE6}, {0x20FFE8, 0x20FFE8},   {0x20FFE9, 0x20FFEC},   {0x20FFED, 0x20FFEE},
    {0x100FFF9, 0x100FFFB}, {0xC0FFFC, 0xC0FFFC},   {0x20FFFD, 0x20FFFD},   {0x210000, 0x21000B},
    {0x21000D, 0x210026},   {0x210028, 0x21003A},   {0x21003C, 0x21003D},   {0x21003F, 0x21004D},
    {0x210050, 0x21005D},   {0x210080, 0x2100FA},   {0x410100, 0x410102},   {0x210107, 0x210133},
    {0x210137, 0x21013F},   {0x210140, 0x210174},   {0x210175, 0x210178},   {0x210179, 0x210189},
    {0x21018A, 0x21018B},   {0x21018C, 0x21018E},   {0x210190, 0x21019C},   {0x2101A0, 0x2101A0},
    {0x2101D0, 0x2101FC},   {0x10101FD, 0x10101FD}, {0x210280, 0x21029C},   {0x2102A0, 0x2102D0},
    {0x10102E0, 0x10102E0}, {0x2102E1, 0x2102FB},   {0x210300, 0x21031F},   {0x210320, 0x210323},
    {0x21032D, 0x21032F},   {0x210330, 0x210340},   {0x210341, 0x210341},   {0x210342, 0x210349},
    {0x21034A, 0x21034A},   {0x210350, 0x210375},   {0x1010376, 0x101037A}, {0x210380, 0x21039D},
    {0x41039F, 0x41039F},   {0x2103A0, 0x2103C3},   {0x2103C8, 0x2103CF},   {0x4103D0, 0x4103D0},
    {0x2103D1, 0x2103D5},   {0x210400, 0x21044F},   {0x210450, 0x21047F},   {0x210480, 0x21049D},
    {0x38104A0, 0x38104A9}, {0x2104B0, 0x2104D3},   {0x2104D8, 0x2104FB},   {0x210500, 0x210527},
    {0x210530, 0x210563},   {0x21056F, 0x21056F},   {0x210570, 0x21057A},   {0x21057C, 0x21058A},
    {0x21058C, 0x210592},   {0x210594, 0x210595},   {0x210597, 0x2105A1},   {0x2105A3, 0x2105B1},
    {0x2105B3, 0x2105B9},   {0x2105BB, 0x2105BC},   {0x210600, 0x210736},   {0x210740, 0x210755},
    {0x210760, 0x210767},   {0x210780, 0x210785},   {0x210787, 0x2107B0},   {0x2107B2, 0x2107BA},
    {0x210800, 0x210805},   {0x210808, 0x210808},   {0x21080A, 0x210835},   {0x210837, 0x210838},
    {0x21083C, 0x21083C},   {0x21083F, 0x21083F},   {0x210840, 0x210855},   {0x410857, 0x410857},
    {0x210858, 0x21085F},   {0x210860, 0x210876},   {0x210877, 0x210878},   {0x210879, 0x21087F},
    {0x210880, 0x21089E},   {0x2108A7, 0x2108AF},   {0x2108E0, 0x2108F2},   {0x2108F4, 0x2108F5},
    {0x2108FB, 0x2108FF},   {0x210900, 0x210915},   {0x210916, 0x21091B},   {0x41091F, 0x41091F},
    {0x210920, 0x210939},   {0x21093F, 0x21093F},   {0x210980, 0x21099F},   {0x2109A0, 0x2109B7},
    {0x2109BC, 0x2109BD},   {0x2109BE, 0x2109BF},   {0x2109C0, 0x2109CF},   {0x2109D2, 0x2109FF},
    {0x210A00, 0x210A00},   {0x1010A01, 0x1010A03}, {0x1010A05, 0x1010A06}, {0x1010A0C, 0x1010A0F},
    {0x210A10, 0x210A13},   {0x210A15, 0x210A17},   {0x210A19, 0x210A35},   {0x1010A38, 0x1010A3A},
    {0x1010A3F, 0x1010A3F}, {0x210A40, 0x210A48},   {0x410A50, 0x410A57},   {0x210A58, 0x210A58},
    {0x210A60, 0x210A7C},   {0x210A7D, 0x210A7E},   {0x210A7F, 0x210A7F},   {0x210A80, 0x210A9C},
    {0x210A9D, 0x210A9F},   {0x210AC0, 0x210AC7},   {0x210AC8, 0x210AC8},   {0x210AC9, 0x210AE4},
    {0x1010AE5, 0x1010AE6}, {0x210AEB, 0x210AEF},   {0x410AF0, 0x410AF5},   {0x2810AF6, 0x2810AF6},
    {0x210B00, 0x210B35},   {0x410B39, 0x410B3F},   {0x210B40, 0x210B55},   {0x210B58, 0x210B5F},
    {0x210B60, 0x210B72},   {0x210B78, 0x210B7F},   {0x210B80, 0x210B91},   {0x210B99, 0x210B9C},
    {0x210BA9, 0x210BAF},   {0x210C00, 0x210C48},   {0x210C80, 0x210CB2},   {0x210CC0, 0x210CF2},
    {0x210CFA, 0x210CFF},   {0x210D00, 0x210D23},   {0x1010D24, 0x1010D27}, {0x3810D30, 0x3810D39},
    {0x210E60, 0x210E7E},   {0x210E80, 0x210EA9},   {0x1010EAB, 0x1010EAC}, {0x410EAD, 0x410EAD},
    {0x210EB0, 0x210EB1},   {0x210F00, 0x210F1C},   {0x210F1D, 0x210F26},   {0x210F27, 0x210F27},
    {0x210F30, 0x210F45},   {0x1010F46, 0x1010F50}, {0x210F51, 0x210F54},   {0x210F55, 0x210F59},
    {0x210F70, 0x210F81},   {0x1010F82, 0x1010F85}, {0x210F86, 0x210F89},   {0x210FB0, 0x210FC4},
    {0x210FC5, 0x210FCB},   {0x210FE0, 0x210FF6},   {0x1011000, 0x1011000}, {0x1011001, 0x1011001},
    {0x1011002, 0x1011002}, {0x211003, 0x211037},   {0x1011038, 0x1011046}, {0x411047, 0x411048},
    {0x211049, 0x21104D},   {0x211052, 0x211065},   {0x3811066, 0x381106F}, {0x1011070, 0x1011070},
    {0x211071, 0x211072},   {0x1011073, 0x1011074}, {0x211075, 0x211075},   {0x101107F, 0x101107F},
    {0x1011080, 0x1011081}, {0x1011082, 0x1011082}, {0x211083, 0x2110AF},   {0x10110B0, 0x10110B2},
    {0x10110B3, 0x10110B6}, {0x10110B7, 0x10110B8}, {0x10110B9, 0x10110BA}, {0x2110BB, 0x2110BC},
    {0x2110BD, 0x2110BD},   {0x4110BE, 0x4110C1},   {0x10110C2, 0x10110C2}, {0x2110CD, 0x2110CD},
    {0x2110D0, 0x2110E8},   {0x38110F0, 0x38110F9}, {0x1011100, 0x1011102}, {0x211103, 0x211126},
    {0x1011127, 0x101112B}, {0x101112C, 0x101112C}, {0x101112D, 0x1011134}, {0x3811136, 0x381113F},
    {0x411140, 0x411143},   {0x211144, 0x211144},   {0x1011145, 0x1011146}, {0x211147, 0x211147},
    {0x211150, 0x211172},   {0x1011173, 0x1011173}, {0x211174, 0x211174},   {0x611175, 0x611175},
    {0x211176, 0x211176},   {0x1011180, 0x1011181}, {0x1011182, 0x1011182}, {0x211183, 0x2111B2},
    {0x10111B3, 0x10111B5}, {0x10111B6, 0x10111BE}, {0x10111BF, 0x10111C0}, {0x2111C1, 0x2111C4},
    {0x4111C5, 0x4111C6},   {0x2111C7, 0x2111C7},   {0x4111C8, 0x4111C8},   {0x10111C9, 0x10111CC},
    {0x2111CD, 0x2111CD},   {0x10111CE, 0x10111CE}, {0x10111CF, 0x10111CF}, {0x38111D0, 0x38111D9},
    {0x2111DA, 0x2111DA},   {0x6111DB, 0x6111DB},   {0x2111DC, 0x2111DC},   {0x4111DD, 0x4111DF},
    {0x2111E1, 0x2111F4},   {0x211200, 0x211211},   {0x211213, 0x21122B},   {0x101122C, 0x101122E},
    {0x101122F, 0x1011231}, {0x1011232, 0x1011233}, {0x1011234, 0x1011234}, {0x1011235, 0x1011235},
    {0x1011236, 0x1011237}, {0x411238, 0x411239},   {0x21123A, 0x21123A},   {0x41123B, 0x41123C},
    {0x21123D, 0x21123D},   {0x101123E, 0x101123E}, {0x211280, 0x211286},   {0x211288, 0x211288},
    {0x21128A, 0x21128D},   {0x21128F, 0x21129D},   {0x21129F, 0x2112A8},   {0x4112A9, 0x4112A9},
    {0x2112B0, 0x2112DE},   {0x10112DF, 0x10112DF}, {0x10112E0, 0x10112E2}, {0x10112E3, 0x10112EA},
    {0x38112F0, 0x38112F9}, {0x1011300, 0x1011301}, {0x1011302, 0x1011303}, {0x211305, 0x21130C},
    {0x21130F, 0x211310},   {0x211313, 0x211328},   {0x21132A, 0x211330},   {0x211332, 0x211333},
    {0x211335, 0x211339},   {0x101133B, 0x101133C}, {0x21133D, 0x21133D},   {0x101133E, 0x101133F},
    {0x1011340, 0x1011340}, {0x1011341, 0x1011344}, {0x1011347, 0x1011348}, {0x101134B, 0x101134D},
    {0x211350, 0x211350},   {0x1011357, 0x1011357}, {0x21135D, 0x211361},   {0x1011362, 0x1011363},
    {0x1011366, 0x101136C}, {0x1011370, 0x1011374}, {0x211400, 0x211434},   {0x1011435, 0x1011437},
    {0x1011438, 0x101143F}, {0x1011440, 0x1011441}, {0x1011442, 0x1011444}, {0x1011445, 0x1011445},
    {0x1011446, 0x1011446}, {0x211447, 0x21144A},   {0x41144B, 0x41144E},   {0x21144F, 0x21144F},
    {0x3811450, 0x3811459}, {0x41145A, 0x41145B},   {0x21145D, 0x21145D},   {0x101145E, 0x101145E},
    {0x21145F, 0x211461},   {0x211480, 0x2114AF},   {0x10114B0, 0x10114B2}, {0x10114B3, 0x10114B8},
    {0x10114B9, 0x10114B9}, {0x10114BA, 0x10114BA}, {0x10114BB, 0x10114BE}, {0x10114BF, 0x10114C0},
    {0x10114C1, 0x10114C1}, {0x10114C2, 0x10114C3}, {0x2114C4, 0x2114C5},   {0x2114C6, 0x2114C6},
    {0x2114C7, 0x2114C7},   {0x38114D0, 0x38114D9}, {0x211580, 0x2115AE},   {0x10115AF, 0x10115B1},
    {0x10115B2, 0x10115B5}, {0x10115B8, 0x10115BB}, {0x10115BC, 0x10115BD}, {0x10115BE, 0x10115BE},
    {0x10115BF, 0x10115C0}, {0x6115C1, 0x6115C1},   {0x4115C2, 0x4115C3},   {0x1A115C4, 0x1A115C5},
    {0x2115C6, 0x2115C8},   {0x4115C9, 0x4115D7},   {0x2115D8, 0x2115DB},   {0x10115DC, 0x10115DD},
    {0x211600, 0x21162F},   {0x1011630, 0x1011632}, {0x1011633, 0x101163A}, {0x101163B, 0x101163C},
    {0x101163D, 0x101163D}, {0x101163E, 0x101163E}, {0x101163F, 0x1011640}, {0x411641, 0x411642},
    {0x211643, 0x211643},   {0x211644, 0x211644},   {0x3811650, 0x3811659}, {0x611660, 0x61166C},
    {0x211680, 0x2116AA},   {0x10116AB, 0x10116AB}, {0x10116AC, 0x10116AC}, {0x10116AD, 0x10116AD},
    {0x10116AE, 0x10116AF}, {0x10116B0, 0x10116B5}, {0x10116B6, 0x10116B6}, {0x10116B7, 0x10116B7},
    {0x2116B8, 0x2116B8},   {0x2116B9, 0x2116B9},   {0x38116C0, 0x38116C9}, {0x211700, 0x21171A},
    {0x101171D, 0x101171F}, {0x1011720, 0x1011721}, {0x1011722, 0x1011725}, {0x1011726, 0x1011726},
    {0x1011727, 0x101172B}, {0x3811730, 0x3811739}, {0x21173A, 0x21173B},   {0x41173C, 0x41173E},
    {0x21173F, 0x21173F},   {0x211740, 0x211746},   {0x211800, 0x21182B},   {0x101182C, 0x101182E},
    {0x101182F, 0x1011837}, {0x1011838, 0x1011838}, {0x1011839, 0x101183A}, {0x21183B, 0x21183B},
    {0x2118A0, 0x2118DF},   {0x38118E0, 0x38118E9}, {0x2118EA, 0x2118F2},   {0x2118FF, 0x2118FF},
    {0x211900, 0x211906},   {0x211909, 0x211909},   {0x21190C, 0x211913},   {0x211915, 0x211916},
    {0x211918, 0x21192F},   {0x1011930, 0x1011935}, {0x1011937, 0x1011938}, {0x101193B, 0x101193C},
    {0x101193D, 0x101193D}, {0x101193E, 0x101193E}, {0x21193F, 0x21193F},   {0x1011940, 0x1011940},
    {0x211941, 0x211941},   {0x1011942, 0x1011942}, {0x1011943, 0x1011943}, {0x411944, 0x411946},
    {0x3811950, 0x3811959}, {0x2119A0, 0x2119A7},   {0x2119AA, 0x2119D0},   {0x10119D1, 0x10119D3},
    {0x10119D4, 0x10119D7}, {0x10119DA, 0x10119DB}, {0x10119DC, 0x10119DF}, {0x10119E0, 0x10119E0},
    {0x2119E1, 0x2119E1},   {0x6119E2, 0x6119E2},   {0x2119E3, 0x2119E3},   {0x10119E4, 0x10119E4},
    {0x211A00, 0x211A00},   {0x1011A01, 0x1011A0A}, {0x211A0B, 0x211A32},   {0x1011A33, 0x1011A38},
    {0x1011A39, 0x1011A39}, {0x211A3A, 0x211A3A},   {0x1011A3B, 0x1011A3E}, {0x611A3F, 0x611A3F},
    {0x211A40, 0x211A40},   {0x411A41, 0x411A44},   {0x611A45, 0x611A45},   {0x211A46, 0x211A46},
    {0x1011A47, 0x1011A47}, {0x211A50, 0x211A50},   {0x1011A51, 0x1011A56}, {0x1011A57, 0x1011A58},
    {0x1011A59, 0x1011A5B}, {0x211A5C, 0x211A89},   {0x1011A8A, 0x1011A96}, {0x1011A97, 0x1011A97},
    {0x1011A98, 0x1011A99}, {0x411A9A, 0x411A9C},   {0x211A9D, 0x211A9D},   {0x611A9E, 0x611AA0},
    {0x411AA1, 0x411AA2},   {0x211AB0, 0x211ABF},   {0x211AC0, 0x211AF8},   {0x211C00, 0x211C08},
    {0x211C0A, 0x211C2E},   {0x1011C2F, 0x1011C2F}, {0x1011C30, 0x1011C36}, {0x1011C38, 0x1011C3D},
    {0x1011C3E, 0x1011C3E}, {0x1011C3F, 0x1011C3F}, {0x211C40, 0x211C40},   {0x411C41, 0x411C45},
    {0x3811C50, 0x3811C59}, {0x211C5A, 0x211C6C},   {0x611C70, 0x611C70},   {0x1A11C71, 0x1A11C71},
    {0x211C72, 0x211C8F},   {0x1011C92, 0x1011CA7}, {0x1011CA9, 0x1011CA9}, {0x1011CAA, 0x1011CB0},
    {0x1011CB1, 0x1011CB1}, {0x1011CB2, 0x1011CB3}, {0x1011CB4, 0x1011CB4}, {0x1011CB5, 0x1011CB6},
    {0x211D00, 0x211D06},   {0x211D08, 0x211D09},   {0x211D0B, 0x211D30},   {0x1011D31, 0x1011D36},
    {0x1011D3A, 0x1011D3A}, {0x1011D3C, 0x1011D3D}, {0x1011D3F, 0x1011D45}, {0x211D46, 0x211D46},
    {0x1011D47, 0x1011D47}, {0x3811D50, 0x3811D59}, {0x211D60, 0x211D65},   {0x211D67, 0x211D68},
    {0x211D6A, 0x211D89},   {0x1011D8A, 0x1011D8E}, {0x1011D90, 0x1011D91}, {0x1011D93, 0x1011D94},
    {0x1011D95, 0x1011D95}, {0x1011D96, 0x1011D96}, {0x1011D97, 0x1011D97}, {0x211D98, 0x211D98},
    {0x3811DA0, 0x3811DA9}, {0x211EE0, 0x211EF2},   {0x1011EF3, 0x1011EF4}, {0x1011EF5, 0x1011EF6},
    {0x211EF7, 0x211EF8},   {0x211FB0, 0x211FB0},   {0x211FC0, 0x211FD4},   {0x211FD5, 0x211FDC},
    {0x3C11FDD, 0x3C11FE0}, {0x211FE1, 0x211FF1},   {0x411FFF, 0x411FFF},   {0x212000, 0x212399},
    {0x212400, 0x21246E},   {0x412470, 0x412474},   {0x212480, 0x212543},   {0x212F90, 0x212FF0},
    {0x212FF1, 0x212FF2},   {0x213000, 0x213257},   {0x3A13258, 0x3A1325A}, {0xE1325B, 0xE1325D},
    {0x21325E, 0x213281},   {0xE13282, 0xE13282},   {0x213283, 0x213285},   {0x3A13286, 0x3A13286},
    {0xE13287, 0xE13287},   {0x3A13288, 0x3A13288}, {0xE13289, 0xE13289},   {0x21328A, 0x213378},
    {0x3A13379, 0x3A13379}, {0xE1337A, 0xE1337B},   {0x21337C, 0x21342E},   {0x1C13430, 0x1C13436},
    {0x3A13437, 0x3A13437}, {0xE13438, 0xE13438},   {0x214400, 0x2145CD},   {0x3A145CE, 0x3A145CE},
    {0xE145CF, 0xE145CF},   {0x2145D0, 0x214646},   {0x216800, 0x216A38},   {0x216A40, 0x216A5E},
    {0x3816A60, 0x3816A69}, {0x416A6E, 0x416A6F},   {0x216A70, 0x216ABE},   {0x3816AC0, 0x3816AC9},
    {0x216AD0, 0x216AED},   {0x1016AF0, 0x1016AF4}, {0x416AF5, 0x416AF5},   {0x216B00, 0x216B2F},
    {0x1016B30, 0x1016B36}, {0x416B37, 0x416B39},   {0x216B3A, 0x216B3B},   {0x216B3C, 0x216B3F},
    {0x216B40, 0x216B43},   {0x416B44, 0x416B44},   {0x216B45, 0x216B45},   {0x3816B50, 0x3816B59},
    {0x216B5B, 0x216B61},   {0x216B63, 0x216B77},   {0x216B7D, 0x216B8F},   {0x216E40, 0x216E7F},
    {0x216E80, 0x216E96},   {0x416E97, 0x416E98},   {0x216E99, 0x216E9A},   {0x216F00, 0x216F4A},
    {0x1016F4F, 0x1016F4F}, {0x216F50, 0x216F50},   {0x1016F51, 0x1016F87}, {0x1016F8F, 0x1016F92},
    {0x216F93, 0x216F9F},   {0x3616FE0, 0x3616FE1}, {0x3616FE2, 0x3616FE2}, {0x3616FE3, 0x3616FE3},
    {0x1C16FE4, 0x1C16FE4}, {0x1016FF0, 0x1016FF1}, {0x2417000, 0x24187F7}, {0x2418800, 0x2418AFF},
    {0x218B00, 0x218CD5},   {0x2418D00, 0x2418D08}, {0x21AFF0, 0x21AFF3},   {0x21AFF5, 0x21AFFB},
    {0x21AFFD, 0x21AFFE},   {0x241B000, 0x241B0FF}, {0x241B100, 0x241B122}, {0x361B150, 0x361B152},
    {0x361B164, 0x361B167}, {0x241B170, 0x241B2FB}, {0x21BC00, 0x21BC6A},   {0x21BC70, 0x21BC7C},
    {0x21BC80, 0x21BC88},   {0x21BC90, 0x21BC99},   {0x21BC9C, 0x21BC9C},   {0x101BC9D, 0x101BC9E},
    {0x41BC9F, 0x41BC9F},   {0x101BCA0, 0x101BCA3}, {0x101CF00, 0x101CF2D}, {0x101CF30, 0x101CF46},
    {0x21CF50, 0x21CFC3},   {0x21D000, 0x21D0F5},   {0x21D100, 0x21D126},   {0x21D129, 0x21D164},
    {0x101D165, 0x101D166}, {0x101D167, 0x101D169}, {0x21D16A, 0x21D16C},   {0x101D16D, 0x101D172},
    {0x101D173, 0x101D17A}, {0x101D17B, 0x101D182}, {0x21D183, 0x21D184},   {0x101D185, 0x101D18B},
    {0x21D18C, 0x21D1A9},   {0x101D1AA, 0x101D1AD}, {0x21D1AE, 0x21D1EA},   {0x21D200, 0x21D241},
    {0x101D242, 0x101D244}, {0x21D245, 0x21D245},   {0x21D2E0, 0x21D2F3},   {0x21D300, 0x21D356},
    {0x21D360, 0x21D378},   {0x21D400, 0x21D454},   {0x21D456, 0x21D49C},   {0x21D49E, 0x21D49F},
    {0x21D4A2, 0x21D4A2},   {0x21D4A5, 0x21D4A6},   {0x21D4A9, 0x21D4AC},   {0x21D4AE, 0x21D4B9},
    {0x21D4BB, 0x21D4BB},   {0x21D4BD, 0x21D4C3},   {0x21D4C5, 0x21D505},   {0x21D507, 0x21D50A},
    {0x21D50D, 0x21D514},   {0x21D516, 0x21D51C},   {0x21D51E, 0x21D539},   {0x21D53B, 0x21D53E},
    {0x21D540, 0x21D544},   {0x21D546, 0x21D546},   {0x21D54A, 0x21D550},   {0x21D552, 0x21D6A5},
    {0x21D6A8, 0x21D6C0},   {0x21D6C1, 0x21D6C1},   {0x21D6C2, 0x21D6DA},   {0x21D6DB, 0x21D6DB},
    {0x21D6DC, 0x21D6FA},   {0x21D6FB, 0x21D6FB},   {0x21D6FC, 0x21D714},   {0x21D715, 0x21D715},
    {0x21D716, 0x21D734},   {0x21D735, 0x21D735},   {0x21D736, 0x21D74E},   {0x21D74F, 0x21D74F},
    {0x21D750, 0x21D76E},   {0x21D76F, 0x21D76F},   {0x21D770, 0x21D788},   {0x21D789, 0x21D789},
    {0x21D78A, 0x21D7A8},   {0x21D7A9, 0x21D7A9},   {0x21D7AA, 0x21D7C2},   {0x21D7C3, 0x21D7C3},
    {0x21D7C4, 0x21D7CB},   {0x381D7CE, 0x381D7FF}, {0x21D800, 0x21D9FF},   {0x101DA00, 0x101DA36},
    {0x21DA37, 0x21DA3A},   {0x101DA3B, 0x101DA6C}, {0x21DA6D, 0x21DA74},   {0x101DA75, 0x101DA75},
    {0x21DA76, 0x21DA83},   {0x101DA84, 0x101DA84}, {0x21DA85, 0x21DA86},   {0x41DA87, 0x41DA8A},
    {0x21DA8B, 0x21DA8B},   {0x101DA9B, 0x101DA9F}, {0x101DAA1, 0x101DAAF}, {0x21DF00, 0x21DF09},
    {0x21DF0A, 0x21DF0A},   {0x21DF0B, 0x21DF1E},   {0x101E000, 0x101E006}, {0x101E008, 0x101E018},
    {0x101E01B, 0x101E021}, {0x101E023, 0x101E024}, {0x101E026, 0x101E02A}, {0x21E100, 0x21E12C},
    {0x101E130, 0x101E136}, {0x21E137, 0x21E13D},   {0x381E140, 0x381E149}, {0x21E14E, 0x21E14E},
    {0x21E14F, 0x21E14F},   {0x21E290, 0x21E2AD},   {0x101E2AE, 0x101E2AE}, {0x21E2C0, 0x21E2EB},
    {0x101E2EC, 0x101E2EF}, {0x381E2F0, 0x381E2F9}, {0x3E1E2FF, 0x3E1E2FF}, {0x21E7E0, 0x21E7E6},
    {0x21E7E8, 0x21E7EB},   {0x21E7ED, 0x21E7EE},   {0x21E7F0, 0x21E7FE},   {0x21E800, 0x21E8C4},
    {0x21E8C7, 0x21E8CF},   {0x101E8D0, 0x101E8D6}, {0x21E900, 0x21E943},   {0x101E944, 0x101E94A},
    {0x21E94B, 0x21E94B},   {0x381E950, 0x381E959}, {0x3A1E95E, 0x3A1E95F}, {0x21EC71, 0x21ECAB},
    {0x3C1ECAC, 0x3C1ECAC}, {0x21ECAD, 0x21ECAF},   {0x3C1ECB0, 0x3C1ECB0}, {0x21ECB1, 0x21ECB4},
    {0x21ED01, 0x21ED2D},   {0x21ED2E, 0x21ED2E},   {0x21ED2F, 0x21ED3D},   {0x21EE00, 0x21EE03},
    {0x21EE05, 0x21EE1F},   {0x21EE21, 0x21EE22},   {0x21EE24, 0x21EE24},   {0x21EE27, 0x21EE27},
    {0x21EE29, 0x21EE32},   {0x21EE34, 0x21EE37},   {0x21EE39, 0x21EE39},   {0x21EE3B, 0x21EE3B},
    {0x21EE42, 0x21EE42},   {0x21EE47, 0x21EE47},   {0x21EE49, 0x21EE49},   {0x21EE4B, 0x21EE4B},
    {0x21EE4D, 0x21EE4F},   {0x21EE51, 0x21EE52},   {0x21EE54, 0x21EE54},   {0x21EE57, 0x21EE57},
    {0x21EE59, 0x21EE59},   {0x21EE5B, 0x21EE5B},   {0x21EE5D, 0x21EE5D},   {0x21EE5F, 0x21EE5F},
    {0x21EE61, 0x21EE62},   {0x21EE64, 0x21EE64},   {0x21EE67, 0x21EE6A},   {0x21EE6C, 0x21EE72},
    {0x21EE74, 0x21EE77},   {0x21EE79, 0x21EE7C},   {0x21EE7E, 0x21EE7E},   {0x21EE80, 0x21EE89},
    {0x21EE8B, 0x21EE9B},   {0x21EEA1, 0x21EEA3},   {0x21EEA5, 0x21EEA9},   {0x21EEAB, 0x21EEBB},
    {0x21EEF0, 0x21EEF1},   {0x241F000, 0x241F02B}, {0x241F02C, 0x241F02F}, {0x241F030, 0x241F093},
    {0x241F094, 0x241F09F}, {0x241F0A0, 0x241F0AE}, {0x241F0AF, 0x241F0B0}, {0x241F0B1, 0x241F0BF},
    {0x241F0C0, 0x241F0C0}, {0x241F0C1, 0x241F0CF}, {0x241F0D0, 0x241F0D0}, {0x241F0D1, 0x241F0F5},
    {0x241F0F6, 0x241F0FF}, {0x21F100, 0x21F10C},   {0x241F10D, 0x241F10F}, {0x21F110, 0x21F12D},
    {0x21F12E, 0x21F12F},   {0x21F130, 0x21F169},   {0x21F16A, 0x21F16C},   {0x241F16D, 0x241F16F},
    {0x21F170, 0x21F1AC},   {0x241F1AD, 0x241F1AD}, {0x241F1AE, 0x241F1E5}, {0x421F1E6, 0x421F1FF},
    {0x241F200, 0x241F202}, {0x241F203, 0x241F20F}, {0x241F210, 0x241F23B}, {0x241F23C, 0x241F23F},
    {0x241F240, 0x241F248}, {0x241F249, 0x241F24F}, {0x241F250, 0x241F251}, {0x241F252, 0x241F25F},
    {0x241F260, 0x241F265}, {0x241F266, 0x241F2FF}, {0x241F300, 0x241F384}, {0x161F385, 0x161F385},
    {0x241F386, 0x241F39B}, {0x21F39C, 0x21F39D},   {0x241F39E, 0x241F3B4}, {0x21F3B5, 0x21F3B6},
    {0x241F3B7, 0x241F3BB}, {0x21F3BC, 0x21F3BC},   {0x241F3BD, 0x241F3C1}, {0x161F3C2, 0x161F3C4},
    {0x241F3C5, 0x241F3C6}, {0x161F3C7, 0x161F3C7}, {0x241F3C8, 0x241F3C9}, {0x161F3CA, 0x161F3CC},
    {0x241F3CD, 0x241F3FA}, {0x181F3FB, 0x181F3FF}, {0x241F400, 0x241F441}, {0x161F442, 0x161F443},
    {0x241F444, 0x241F445}, {0x161F446, 0x161F450}, {0x241F451, 0x241F465}, {0x161F466, 0x161F478},
    {0x241F479, 0x241F47B}, {0x161F47C, 0x161F47C}, {0x241F47D, 0x241F480}, {0x161F481, 0x161F483},
    {0x241F484, 0x241F484}, {0x161F485, 0x161F487}, {0x241F488, 0x241F48E}, {0x161F48F, 0x161F48F},
    {0x241F490, 0x241F490}, {0x161F491, 0x161F491}, {0x241F492, 0x241F49F}, {0x21F4A0, 0x21F4A0},
    {0x241F4A1, 0x241F4A1}, {0x21F4A2, 0x21F4A2},   {0x241F4A3, 0x241F4A3}, {0x21F4A4, 0x21F4A4},
    {0x241F4A5, 0x241F4A9}, {0x161F4AA, 0x161F4AA}, {0x241F4AB, 0x241F4AE}, {0x21F4AF, 0x21F4AF},
    {0x241F4B0, 0x241F4B0}, {0x21F4B1, 0x21F4B2},   {0x241F4B3, 0x241F4FF}, {0x21F500, 0x21F506},
    {0x241F507, 0x241F516}, {0x21F517, 0x21F524},   {0x241F525, 0x241F531}, {0x21F532, 0x21F549},
    {0x241F54A, 0x241F573}, {0x161F574, 0x161F575}, {0x241F576, 0x241F579}, {0x161F57A, 0x161F57A},
    {0x241F57B, 0x241F58F}, {0x161F590, 0x161F590}, {0x241F591, 0x241F594}, {0x161F595, 0x161F596},
    {0x241F597, 0x241F5D3}, {0x21F5D4, 0x21F5DB},   {0x241F5DC, 0x241F5F3}, {0x21F5F4, 0x21F5F9},
    {0x241F5FA, 0x241F5FF}, {0x241F600, 0x241F644}, {0x161F645, 0x161F647}, {0x241F648, 0x241F64A},
    {0x161F64B, 0x161F64F}, {0x21F650, 0x21F675},   {0x401F676, 0x401F678}, {0x361F679, 0x361F67B},
    {0x21F67C, 0x21F67F},   {0x241F680, 0x241F6A2}, {0x161F6A3, 0x161F6A3}, {0x241F6A4, 0x241F6B3},
    {0x161F6B4, 0x161F6B6}, {0x241F6B7, 0x241F6BF}, {0x161F6C0, 0x161F6C0}, {0x241F6C1, 0x241F6CB},
    {0x161F6CC, 0x161F6CC}, {0x241F6CD, 0x241F6D7}, {0x241F6D8, 0x241F6DC}, {0x241F6DD, 0x241F6EC},
    {0x241F6ED, 0x241F6EF}, {0x241F6F0, 0x241F6FC}, {0x241F6FD, 0x241F6FF}, {0x21F700, 0x21F773},
    {0x241F774, 0x241F77F}, {0x21F780, 0x21F7D4},   {0x241F7D5, 0x241F7D8}, {0x241F7D9, 0x241F7DF},
    {0x241F7E0, 0x241F7EB}, {0x241F7EC, 0x241F7EF}, {0x241F7F0, 0x241F7F0}, {0x241F7F1, 0x241F7FF},
    {0x21F800, 0x21F80B},   {0x241F80C, 0x241F80F}, {0x21F810, 0x21F847},   {0x241F848, 0x241F84F},
    {0x21F850, 0x21F859},   {0x241F85A, 0x241F85F}, {0x21F860, 0x21F887},   {0x241F888, 0x241F88F},
    {0x21F890, 0x21F8AD},   {0x241F8AE, 0x241F8AF}, {0x241F8B0, 0x241F8B1}, {0x241F8B2, 0x241F8FF},
    {0x21F900, 0x21F90B},   {0x161F90C, 0x161F90C}, {0x241F90D, 0x241F90E}, {0x161F90F, 0x161F90F},
    {0x241F910, 0x241F917}, {0x161F918, 0x161F91F}, {0x241F920, 0x241F925}, {0x161F926, 0x161F926},
    {0x241F927, 0x241F92F}, {0x161F930, 0x161F939}, {0x241F93A, 0x241F93B}, {0x161F93C, 0x161F93E},
    {0x241F93F, 0x241F976}, {0x161F977, 0x161F977}, {0x241F978, 0x241F9B4}, {0x161F9B5, 0x161F9B6},
    {0x241F9B7, 0x241F9B7}, {0x161F9B8, 0x161F9B9}, {0x241F9BA, 0x241F9BA}, {0x161F9BB, 0x161F9BB},
    {0x241F9BC, 0x241F9CC}, {0x161F9CD, 0x161F9CF}, {0x241F9D0, 0x241F9D0}, {0x161F9D1, 0x161F9DD},
    {0x241F9DE, 0x241F9FF}, {0x21FA00, 0x21FA53},   {0x241FA54, 0x241FA5F}, {0x241FA60, 0x241FA6D},
    {0x241FA6E, 0x241FA6F}, {0x241FA70, 0x241FA74}, {0x241FA75, 0x241FA77}, {0x241FA78, 0x241FA7C},
    {0x241FA7D, 0x241FA7F}, {0x241FA80, 0x241FA86}, {0x241FA87, 0x241FA8F}, {0x241FA90, 0x241FAAC},
    {0x241FAAD, 0x241FAAF}, {0x241FAB0, 0x241FABA}, {0x241FABB, 0x241FABF}, {0x241FAC0, 0x241FAC2},
    {0x161FAC3, 0x161FAC5}, {0x241FAC6, 0x241FACF}, {0x241FAD0, 0x241FAD9}, {0x241FADA, 0x241FADF},
    {0x241FAE0, 0x241FAE7}, {0x241FAE8, 0x241FAEF}, {0x161FAF0, 0x161FAF6}, {0x241FAF7, 0x241FAFF},
    {0x21FB00, 0x21FB92},   {0x21FB94, 0x21FBCA},   {0x381FBF0, 0x381FBF9}, {0x241FC00, 0x241FFFD},
    {0x2420000, 0x242A6DF}, {0x242A6E0, 0x242A6FF}, {0x242A700, 0x242B738}, {0x242B739, 0x242B73F},
    {0x242B740, 0x242B81D}, {0x242B81E, 0x242B81F}, {0x242B820, 0x242CEA1}, {0x242CEA2, 0x242CEAF},
    {0x242CEB0, 0x242EBE0}, {0x242EBE1, 0x242F7FF}, {0x242F800, 0x242FA1D}, {0x242FA1E, 0x242FA1F},
    {0x242FA20, 0x242FFFD}, {0x2430000, 0x243134A}, {0x243134B, 0x243FFFD}, {0x10E0001, 0x10E0001},
    {0x10E0020, 0x10E007F}, {0x10E0100, 0x10E01EF}, {0x2F0000, 0x2FFFFD},   {0x300000, 0x30FFFD},
}};
}  // namespace arg_router::utility::utf8
