/* Copyright (C) 2022 by Camden Mannett.  All rights reserved. */

namespace arg_router
{
/** @page architecture Architectural Overview
 * @tableofcontents
 * 
 * In arg_router core functionality is defined by the parse tree, which
 * consists of tree_node instances that define the parse tree structure (i.e. a
 * parse entry point and token grouping), and policies that define the
 * reusable behaviours of nodes.
 * 
 * @note In order to reduce ambiguity, the term @em token is used for referring
 * to words or symbols passed to the command line by the user; which could be
 * long or short form options (e.g. <TT>-f</TT>, <TT>--flag</TT>) or the values
 * for those options. The term @em argument is used exclusively for a token that
 * expects another word to follow it e.g. arg_t.
 * 
 * @section node_relationships Node Relationships
 * @image html node_relationships.svg height=400px
 *
 * @subsection node_relationships_policies Policies
 * Policies are common sets of behaviours which can be re-used between nodes,
 * but more importantly for us, can be used by a library user to 'build' a
 * custom tree_node by assembling a collection of policies.
 * 
 * Policies come in three basic flavours:
 * - A core type, that just provides some static data (e.g.
 *   policy::long_name_t)
 * - A parsing type, that provides one or more methods that are used by the
 *   derived node to parse, check, and manipulate, the input tokens (e.g.
 *   policy::min_max_count_t)
 * - A tag type, that provides no data, just it's own presence which can be
 *   detected by other parts of the library
 * 
 * @subsection node_relationships_nodes Nodes
 * Nodes are implemented by deriving from tree_node, passing one or more
 * policies and/or children to it's constructor.  Nodes can contain other nodes
 * (i.e. children) and in doing so form a tree structure - our parse tree!
 * 
 * As you may have noticed from the above diagram, tree_node is clever, it can
 * work out which constructor args are policies and which are nodes by itself
 * so you can pass them in any order you like.
 * 
 * @subsection node_relationships_validation Validation
 * Although the nodes can do a lot of compile-time error checking themselves
 * from analysing their children and policies, they can't check everything -
 * mainly because you can easily get into dependency loops by nodes needing to
 * know about other node types and vice-versa (which also leads to horrible
 * spaghetti code).
 * 
 * To prevent this, validation is done separately by a special policy called
 * policy::validation::validator that can only be derived from by the root node
 * (root_t).  As the root is the last to be instantiated (the leaves are created
 * first), it has all the information needed to check the entire tree, @em and
 * because nothing depends on the validator it can know about all the other
 * nodes without causing dependency loops.
 * 
 * @section node_relationships_parsing Parsing
 * Parsing starts at the root node, and follows these basic steps:
 * -# Pre-parse the input tokens to create a parsing::token_list
 * -# Find the 'target' node.  This is a node that carries a policy::router
 *    which will be invoked with the parsed tokens.  It could be a top-level
 *    node (e.g a <TT>--version</TT> flag_t), but more likely a mode-like
 *    (e.g. mode_t) node which could be nested in a mode subtree
 * -# Then the remaing tokens (if any) are parsed by the children of the
 *    target, building up a tuple of results
 * -# The target's policy::router is then called with the results (again, if
 *    any)
 * 
 * The parsing within a node is split up into 'phases' which different policies
 * implement different parts of.
 */
}