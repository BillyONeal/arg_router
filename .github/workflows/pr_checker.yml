# This workflow runs a barrage of tests in order to validate a PR
name: Pull Request Checker

on:
  pull_request:
    branches: [ main ]

env:
  SKIP_COVERAGE_UPDATE: 0
  NUGET_SOURCE_URL: "https://nuget.pkg.github.com/cmannett85/index.json"
  VCPKG_BINARY_SOURCES: 'clear;nuget,vcpkg-cache,readwrite'
  BUILD_DIR: ${{ github.workspace }}/build
  AR_REPO_PATH: ${{ github.workspace }}

jobs:
  # Discard packages older than 90 days
  purge_old_packages:
    runs-on: ubuntu-latest
    steps:
      - uses: MobileheadHolding/github-action-purge-packages@master
        with:
          days-old: 90
          version-regex: .*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Builds the unit tests and executes them
  unit_tests:
    runs-on: ubuntu-latest
    needs: purge_old_packages

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 2
        ref: ${{ github.head_ref }}

    - name: Copyright check
      run: |
        cd ${{ github.workspace }}
        git show --name-only --oneline --pretty="format:" HEAD^..HEAD |
          xargs ./scripts/copyright_checker.py date

    - name: Update packages
      run: |
        sudo apt update
        sudo apt install g++-11 lcov valgrind
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 20 \
          --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-11 \
          --slave /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-11 \
          --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-11 \
          --slave /usr/bin/g++ g++ /usr/bin/g++-11

    - name: Bootstrap vcpkg to build the NuGet client
      run: |
        ./vcpkg/bootstrap-vcpkg.sh -disableMetrics

    - name: Configure NuGet client
      run: |
        mono `./vcpkg/vcpkg fetch nuget | tail -n 1` \
          sources add \
          -source ${{ env.NUGET_SOURCE_URL }} \
          -storepasswordincleartext \
          -name "vcpkg-cache" \
          -username "cmannett85" \
          -password "${{ secrets.GITHUB_TOKEN }}"
        mono `./vcpkg/vcpkg fetch nuget | tail -n 1` \
          setapikey "${{ secrets.GITHUB_TOKEN }}" \
          -source ${{ env.NUGET_SOURCE_URL }}

    - name: Build
      uses: lukka/run-cmake@v3
      with:
        buildDirectory: ${{ env.BUILD_DIR }}
        buildWithCMakeArgs: --target arg_router_test_coverage example_simple example_custom_policy_and_node example_basic_cat example_just_cats

    - name: Run unit tests under Valgrind/Memcheck
      run: |
        cd ${{ env.BUILD_DIR }}/test
        valgrind --error-exitcode=1 ./arg_router_test_coverage -l test_suite

    - name: Calculate unit test coverage
      run: |
        cd ${{ github.workspace }}/scripts/ci
        ./calculate_test_coverage.sh ${{ env.BUILD_DIR }}

    - name: Update README unit test coverage badge
      run: |
        cd ${{ github.workspace }}
        BADGE_URL=$(./scripts/ci/create_badge_url.sh -e)
        sed -i -e "s/https:\/\/img\.shields\.io\/badge\/Unit_Test_Coverage-[0-9\.]\+%25-[a-z]\+/${BADGE_URL}/" ./README.md

    - name: Push updated README and old_coverage
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Updating README.md unit test coverage badge
        file_pattern: README.md scripts/ci/old_coverage

  # Run the unit tests on other platforms/compilers, can't do this in one big
  # matrix as the invocations are different between the platforms
  linux_compiler_tests:
    runs-on: ubuntu-latest
    needs: purge_old_packages

    strategy:
      matrix:
        compiler: ["g++-9", "clang++-10", "clang++-12"]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Bootstrap vcpkg to build the NuGet client
      run: |
        ./vcpkg/bootstrap-vcpkg.sh -disableMetrics

    - name: Configure NuGet client
      run: |
        mono `./vcpkg/vcpkg fetch nuget | tail -n 1` \
          sources add \
          -source ${{ env.NUGET_SOURCE_URL }} \
          -storepasswordincleartext \
          -name "vcpkg-cache" \
          -username "cmannett85" \
          -password "${{ secrets.GITHUB_TOKEN }}"
        mono `./vcpkg/vcpkg fetch nuget | tail -n 1` \
          setapikey "${{ secrets.GITHUB_TOKEN }}" \
          -source ${{ env.NUGET_SOURCE_URL }}

    - name: Build
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeAppendedArgs: -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} -DENABLE_CLANG_TIDY=OFF
        buildDirectory: ${{ env.BUILD_DIR }}
        buildWithCMakeArgs: --target arg_router_test

    - name: Run unit tests
      run: |
        cd ${{ env.BUILD_DIR }}/test
        ./arg_router_test -l test_suite
 
  windows_compiler_tests:
    runs-on: windows-2022
    needs: purge_old_packages

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Bootstrap vcpkg to build the NuGet client
      run: |
        ./vcpkg/bootstrap-vcpkg.bat -disableMetrics

    - name: Configure NuGet client
      run: |
        [array] $output = ./vcpkg/vcpkg.exe fetch nuget
        & $output[-1] sources add -source ${{ env.NUGET_SOURCE_URL }} -storepasswordincleartext -name "vcpkg-cache" -username "cmannett85" -password "${{ secrets.GITHUB_TOKEN }}"
        & $output[-1] setapikey "${{ secrets.GITHUB_TOKEN }}" -source ${{ env.NUGET_SOURCE_URL }}

    - name: Build
      run: |
        & "C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Auxiliary/Build/vcvarsall.bat" x64
        mkdir ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake -G "Visual Studio 17 2022" -A x64 -T "ClangCl" -DVCPKG_TARGET_TRIPLET:STRING="x64-windows-static" -DCMAKE_CXX_COMPILER:FILEPATH="C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Tools/Llvm/x64/bin/clang-cl.exe" -DCMAKE_C_COMPILER:FILEPATH="C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Tools/Llvm/x64/bin/clang-cl.exe" -DCMAKE_RC_COMPILER:FILEPATH="C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Tools/Llvm/x64/bin/llvm-rc.exe" -DENABLE_CLANG_TIDY=OFF ..
        cmake --build . --target arg_router_test example_simple example_custom_policy_and_node example_basic_cat example_just_cats -- /v:n

    - name: Run unit tests
      run: |
        cd ${{ env.BUILD_DIR }}/test/Debug
        ./arg_router_test.exe -l test_suite

  # Makes sure there are no errors when generating the documentation
  documentation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Update packages
      run: |
        sudo apt install doxygen graphviz

    - name: Generate API documentation
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeAppendedArgs: -DDOCS_ONLY=ON
        buildDirectory: ${{ env.BUILD_DIR }}
        buildWithCMakeArgs: --target documentation
