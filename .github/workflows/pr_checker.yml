# This workflow runs a barrage of tests in order to validate a PR into the develop branch
name: Pull Request Checker

on:
  pull_request:
    branches: [ develop ]

env:
  SKIP_COVERAGE_UPDATE: 0
  NUGET_SOURCE_URL: "https://nuget.pkg.github.com/cmannett85/index.json"
  VCPKG_BINARY_SOURCES: 'clear;nuget,vcpkg-cache,readwrite'
  BUILD_DIR: ${{ github.workspace }}/build
  INSTALL_DIR: ${{ github.workspace }}/install
  PACKAGE_BUILD_DIR: ${{ github.workspace }}/package_build

jobs:
  # Discard packages older than 90 days
  purge_old_packages:
    runs-on: ubuntu-latest
    steps:
      - uses: MobileheadHolding/github-action-purge-packages@master
        with:
          days-old: 90
          version-regex: .*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Builds the unit tests and executes them
  unit_test_coverage:
    runs-on: ubuntu-22.04
    needs: purge_old_packages

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 2
        ref: ${{ github.head_ref }}

    - name: Copyright check
      run: |
        cd ${{ github.workspace }}
        git show --name-only --oneline --pretty="format:" HEAD^..HEAD |
          xargs ./scripts/copyright_checker.py date

    - name: Update packages
      run: |
        sudo apt update
        sudo apt install valgrind lcov ninja-build

    - name: Bootstrap vcpkg to build the NuGet client
      run: |
        ./external/vcpkg/bootstrap-vcpkg.sh -disableMetrics

    - name: Configure NuGet client
      run: |
        mono `./external/vcpkg/vcpkg fetch nuget | tail -n 1` \
          sources add \
          -source ${{ env.NUGET_SOURCE_URL }} \
          -storepasswordincleartext \
          -name "vcpkg-cache" \
          -username "cmannett85" \
          -password "${{ secrets.GITHUB_TOKEN }}"
        mono `./external/vcpkg/vcpkg fetch nuget | tail -n 1` \
          setapikey "${{ secrets.GITHUB_TOKEN }}" \
          -source ${{ env.NUGET_SOURCE_URL }}

    - name: Build
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake ${{ github.workspace }} -G "Ninja" -DCMAKE_CXX_COMPILER=clang++-14 -DENABLE_CLANG_TIDY=ON -DDEATH_TEST_PARALLEL=2 -DENABLE_CLANG_FORMAT_CHECKS=ON
        cmake --build . --target arg_router_test_coverage cpp17_examples cpp20_examples

    # We run the tests under Valgrind rather than ASan/UBSan because when combined with coverage
    # causes hangs in the death tests
    - name: Run unit tests under Valgrind and generate coverage data
      timeout-minutes: 30
      run: |
        cd ${{ env.BUILD_DIR }}/test
        valgrind --error-exitcode=1 --leak-check=full ./arg_router_test_coverage -l test_suite

    - name: Calculate unit test coverage
      run: |
        cd ${{ github.workspace }}/scripts/ci
        ./calculate_test_coverage.sh ${{ env.BUILD_DIR }}

    - name: Update README unit test coverage badge
      run: |
        cd ${{ github.workspace }}
        BADGE_URL=$(./scripts/ci/create_badge_url.sh -e)
        sed -i -e "s/https:\/\/img\.shields\.io\/badge\/Unit_Test_Coverage-[0-9\.]\+%25-[a-z]\+/${BADGE_URL}/" ./README.md

    - name: Push updated README and old_coverage
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Updating README.md unit test coverage badge
        file_pattern: README.md scripts/ci/old_coverage

  windows_msvc_compiler_tests:
    runs-on: windows-2022
    needs: purge_old_packages

    # Use the CMake that ships with VS to match locally built versions
    env:
      CMAKE_EXE: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/IDE/CommonExtensions/Microsoft/CMake/CMake/bin/cmake.exe"
      CMD_BUILD_DIR: ${{ github.workspace }}\\build

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Bootstrap vcpkg to build the NuGet client
      run: |
        ./external/vcpkg/bootstrap-vcpkg.bat -disableMetrics

    - name: Configure NuGet client
      run: |
        [array] $output = ./external/vcpkg/vcpkg.exe fetch nuget
        & $output[-1] sources add -source ${{ env.NUGET_SOURCE_URL }} -storepasswordincleartext -name "vcpkg-cache" -username "cmannett85" -password "${{ secrets.GITHUB_TOKEN }}"
        & $output[-1] setapikey "${{ secrets.GITHUB_TOKEN }}" -source ${{ env.NUGET_SOURCE_URL }}

    - name: Build
      shell: cmd
      run: |
        call "C:/PROGRAM FILES/MICROSOFT VISUAL STUDIO/2022/Enterprise/VC/Auxiliary/Build/vcvarsall.bat" x64
        mkdir ${{ env.CMD_BUILD_DIR }}
        cd ${{ env.CMD_BUILD_DIR }}
        "${{ env.CMAKE_EXE }}" ${{ github.workspace }} -G "Visual Studio 17 2022" -DVCPKG_TARGET_TRIPLET:STRING="x64-windows-static" -DDEATH_TEST_PARALLEL=1
        "${{ env.CMAKE_EXE }}" --build . --target arg_router_test cpp17_examples cpp20_examples

    - name: Run unit tests
      timeout-minutes: 20
      run: |
        cd ${{ env.BUILD_DIR }}/test/Debug
        ./arg_router_test.exe -l test_suite

  # Test package integrity test where we use system libs and C++20 (so no nonstd::span)
  system_test_package:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Update packages
      run: |
        sudo apt update
        sudo apt install ninja-build libboost-dev

    - name: Build
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake ${{ github.workspace }} -G "Ninja" -DBUILD_UNIT_TESTS_AND_EXAMPLES=OFF -DDEATH_TEST_PARALLEL=2
        cmake --build .

    - name: Test install
      run: |
        cd ${{ env.BUILD_DIR }}
        cmake --install . --prefix ${{ env.INSTALL_DIR }}
        cd ${{ env.INSTALL_DIR }}
        [[ -f "./include/arg_router/version.hpp" ]]
        [[ -f "./include/arg_router/README.md" ]]
        [[ -f "./include/arg_router/LICENSE" ]]
        [[ -f "./include/arg_router/arg_router-config.cmake" ]]
        [[ -f "./include/arg_router/arg_router-config-version.cmake" ]]

    - name: Test CMake package integrity
      run: |
        mkdir ${{ env.PACKAGE_BUILD_DIR }}
        cd ${{ env.PACKAGE_BUILD_DIR }}
        cmake ${{ github.workspace }}/scripts/ci/package_test_project -DCMAKE_CXX_STANDARD=20 -DCMAKE_PREFIX_PATH=${{ env.INSTALL_DIR }}/include
        cmake --build .

  # Makes sure there are no errors when generating the documentation
  documentation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Update packages
      run: |
        sudo apt install doxygen graphviz

    - name: Generate API documentation
      run: |
        mkdir -p ${{ env.BUILD_DIR }}
        cd ${{ env.BUILD_DIR }}
        cmake ${{ github.workspace }} -DINSTALLATION_ONLY=ON
        cmake --build . --target documentation
